estimate<-(700/300)
se<-sqrt(estimate*(1-estiamte)/1000)
estimate<-(700/300)
estimate
se<-sqrt(estimate*(1-estiamte)/1000)
se<-sqrt(estimate*(1-estimate)/1000)
int.95<-estimate+qnorm(c(.025,.975))*se
y<-rep(c(0,1,2,3,4), c(600,300, 50,30,20))
mean(y)
n<-length(y)
n<-length(y)
estimate<-mean(y)
se<-sd(y)/sqrt(n)
int.95(estimate+qt(c(.025,.975))*se)
int.95<-(estimate+qt(c(.025,.975))*se)
int.95<-(estimate+qt(c(.025,.975),n-1)*se)
girl<-n(.4777, .4875, .4859, .4754, .4874, .4864, .4813, .4787, .4895, .4797, .4876, .4859, .4857, .4907, .5010, .4903, .4860, .4911, .4871, .4725, .4822, .4870, .4823, .4973)
girl<-c(.4777, .4875, .4859, .4754, .4874, .4864, .4813, .4787, .4895, .4797, .4876, .4859, .4857, .4907, .5010, .4903, .4860, .4911, .4871, .4725, .4822, .4870, .4823, .4973)
mean(c)
mean(girl)
sd(girl)
mean(theor)
theor<-c(.5,.5,.5)
mean(theor)
sd(theor)
sd(girl)
sd_exp<-sqrt((.486)(1-.486)/3903)
sqrt((.486)(1-.486)/3903)
sqrt((.486)(1-.486)/3903))
sqrt((.486)(1-.486)/3903)
mean(girl)
sd(girl)
sqrt((.485675)^2/(3903-1))
chisq.test(sd(girl),0.007775031)
meangirl<-mean(girl)
int.95 <- meangirl + qt(c(.025,.975),3903-1)
int.95
esde<-sqrt((.485675)^2/(3903-1))
esde
se<=esde(sqrt(3903))
sE<=esde(sqrt(3903))
esde/(sqrt(3903))
SE<-esde/(sqrt(3903))
int.95 <- meangirl + qt(c(.025,.975),3903-1)*SE
int.95
mean(girl)
meangirl<-mean(girl)
sd(girl)
sqrt((.486)(1-.486)/3903)
sqrt((.486)*(1-.486)/3903)
obs<-sd(girl) #observed sd
exp<-sqrt((.486)*(1-.486)/3903) ##should be expected sd based on observed mean if there was not variation butIsn't this the standard error formula not standard deviation?
chisq.test((obs)-(exp))^2/(exp))
se(obs)
se<-obs/sqrt(3903)
se
2*se
obs+(2*se)
obs-(2*se)
int.95 <- meangirl + qnorm(c(.025,.975))*exp
int.95
vector1<-c(0,50,mean=35, sd=10)
vector1
new<-rescale(vector1,mean=100, sd=15)
rescale(vector1,mean=100, sd=15)
help.search(rescaling)
help.search(rescale)
vector1<-c(0,50,mean=35, sd=10)
rescale(vector1,mean=100, sd=15)
runif(20,min=1, max=100)
h<-runif(20,min=1, max=100)
h
h
h
runif(20,min=1, max=100)
#(4)
runif(20,min=1, max=100)
sum(above)
sum(runif(20,min=1, max=100))
sum(runif(20,min=1, max=100))
for (sum(runif(20,min=1, max=100)))
for(i in 1-1000) {sum(runif(20,min=1, max=100))}
three<-for(i in 1-1000) {sum(runif(20,min=1, max=100))}
three#(4)
three<-for(i in 1-1000) {sum(runif(20,min=1, max=100))}
for(i in 1-1000) {sum(runif(20,min=1, max=100))}
h= sum(runif(20,min=1, max=100)
hfor(i in 1-1000) {sum(runif(20,min=1, max=100))}
h
h
#1) Atest is graded from 0to50,with an averagescore of 35and a standard deviation of 10.
s=c()
h= sum(runif(20,min=1, max=100)
for(i in 1-1000) {s[i]=h[i])}
for(i in 1-1000) {s[i]=h[i]}
s
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
library(plotrix)
library(gdata)
library(nlme)
library(scales)
library(arm)
library(dplyr)
library(tidyr)
library(ggplot2)
library(gridExtra)
library(knitr)
library(xtable)
require(vegan)
data(sipoo)
View(sipoo)
out <- oecosimu(sipoo, decorana, "swap", burnin=100, thin=10, statistic="evals")
out
decorana
plot(as.ts(out))
lag.plot(as.ts(out))
acf(as.ts(out))
## Density plot: needs lattice
require(lattice)
densityplot(out, as.table = TRUE)
## Use quantitative null models to compare
## mean Bray-Curtis dissimilarities
data(dune)
meandist <- function(x) mean(vegdist(x, "bray"))
mbc1 <- oecosimu(dune, meandist, "r2dtable")
mbc1
## Define a custom function that shuffles
## cells in each rows
f <- function(x) {
apply(x, 2, function(z) sample(z, length(z)))
}
mbc2 <- oecosimu(as.matrix(dune), meandist, f)
mbc2
mbc2 <- oecosimu(as.matrix(dune), meandist, f)
data(dune)
meandist <- function(x) mean(vegdist(x, "bray"))
mbc1 <- oecosimu(dune, meandist, "r2dtable")
mbc1
## Define a custom function that shuffles
## cells in each rows
f <- function(x) {
apply(x, 2, function(z) sample(z, length(z)))
}
mbc2 <- oecosimu(as.matrix(dune), meandist, f)
mbc2
mbc2 <- oecosimu(as.matrix(dune),NULL, meandist, f)
mbc2 <- oecosimu(as.matrix(dune),arg= meandist, f)
data(sipoo)
rm(list=ls())
options(stringsAsFactors = FALSE)
require(vegan)
data(sipoo)
View(sipoo)
data <- cbind(c("A","B","C","A"), c("John", "Kendra", "Martin", "Steve"), c("12","12","13","14"))
colnames(data) <- c("Group", "Name", "Score")
data <- as.data.frame(data)
p <- ggplot(data, aes(x = Name, y = Score, fill = Name)) +
geom_point(pch = 19, aes(col = Group)) +
scale_colour_manual(values = c("black", "red", "green")) +
guides(fill = FALSE); p
library(ggplot2)
p <- ggplot(data, aes(x = Name, y = Score, fill = Name)) +
geom_point(pch = 19, aes(col = Group)) +
scale_colour_manual(values = c("black", "red", "green")) +
data = cbind(c("A","B","C","A"), c("John", "Kendra", "Martin", "Steve"), c("12","12","13","14"))
colnames(data) = c("Group", "Name", "Score")
data = as.data.frame(data)
p = ggplot(data, aes(x=Name, y=Score, fill=Name)) + geom_point(pch = 19, aes(col=Group)) + scale_colour_manual(values=c("black", "red", "green"))
print(p)
ggplot(iris) + geom_point(aes(x=Sepal.Width, y=Sepal.Length, color=Species, size=Sepal.Length))
ggplot(iris) + geom_point(aes(x=Sepal.Width, y=Sepal.Length, color=Species, size=Sepal.Length))
ggplot(iris) + geom_point(aes(x=Sepal.Width, y=Sepal.Length, color=Species, size=Sepal.Length)+scale_color_discrete(breaks="setosa"))
ggplot(iris) + geom_point(aes(x=Sepal.Width, y=Sepal.Length, color=Species, size=Sepal.Length))+scale_color_discrete(breaks="setosa"))
ggplot(iris) + geom_point(aes(x=Sepal.Width, y=Sepal.Length, color=Species, size=Sepal.Length))
16+12+8+4+0+
8+6+4+2+0+
4+3+2+1+0
16+12+8+4+0+
8+6+4+2+0+
4+3+2+1+0
24+18+12+6+0+
16+12+8+4+0+
8+6+4+2+0+
4+3+2+1+0
130*3
16+12+8+4+0+
8+6+4+2+0+
4+3+2+1+0
390*3
10*4*2
den<-12+8+4+2
reps<-den*3
treatments<-reps*2
surface<-24+18+12+6+0+
16+12+8+4+0+
8+6+4+2+0+
4+3+2+1+0
treaties<-surface*3 #=390
backup<-3*surface
treaties<-backup*3 #=390
surface<-24+18+12+6+0+
16+12+8+4+0+
8+6+4+2+0+
4+3+2+1+0
##130 seeds of each species * 3 treatments
backup<-3*surface
treaties<-backup*3 #=390
surface<-24+18+12+6+0+
16+12+8+4+0+
8+6+4+2+0+
4+3+2+1+0
##130 seeds of each species * 3 treatments
backup<-3*surface
treaties<-backup*3 #=1170
#GERMINATION TRIALS
#10 seeds per petri dish, 32? dishes per chamber * 8 species
# 4 replicates of 10
dish<-10
reps<-dish*4
germtreat<-reps*2
#80 seeds/species
### for testing pairwise
den<-12+8+4+2
reps<-den*3
treatments<-reps*2
##156
treaties+treatments+germtreat
warnings()
\begin{tabular*}{10 cm}{|l|l|}
1000/10/2
50\3
50/3
16*3*2*10
library(rstan)
library(rstanarm)
data(spinach)
library(devtools)
install_github("daniel-gerhard/standrc")
install.packages("devtools")
library(devtools)
install_github("daniel-gerhard/standrc")
install.packages("drcSeedGerm")
install_github("OnofriAndreaPG/drcSeedGerm")
library(devtools)
install_github("OnofriAndreaPG/drcSeedGerm")
data("lotusOR")
install_github("OnofriAndreaPG/drcSeedGerm")
library(devtools)
install_github("OnofriAndreaPG/drcSeedGerm")
library(drcSeedGerm)
data("lotusOR")
data(lotusOR)
data(lotusOr)
counts <- lotusOr[,3:length(lotusOr[1,])]
treat <- data.frame(tratt=lotusOr[,1])
nViable <- rep(25,12)
moniTimes <- c(1:15)
counts
###fake data for germination mdodels
rm(list=ls())
options(stringsAsFactors = FALSE)
graphics.off()
library(drc)
library(tidyverse)
set.seed(613613)
time<- seq(0, 25, by=3)
germ<-round(rlnorm(9, meanlog = 0, sdlog = 1))
cum.germ<-cumsum(germ)
goo<-data.frame(cbind(time,germ,cum.germ))
goo$unit<-"A"
mod<-drm(cum.germ~time,data=goo,fct = LL.3(), type ="continuous")
summary(mod)
plot(mod)
rm(list=ls())
options(stringsAsFactors = FALSE)
graphics.off()
library(drc)
library(tidyverse)
library(MCMCglmm)
##use lognoral to simulate the data
set.seed(613613)
###This make data folowing the log logistic function
germ<-function(t,d,b,t50){
y<- d/(1+((t/t50)^b))
return(data.frame(time=t, y=y))
}
germ(seq(0,24,by=3),rtnorm(1,.6,0.1,lower=0.4,upper=1),rnorm(1,-5,0.1),rnorm(1,15,1))
##3 petridishes of the same treatment, there is probably a loop or apply function for this
A<-germ(seq(0,24,by=3),rtnorm(1,.6,0.1,lower=0.4,upper=1),rnorm(1,-10,0.1),rnorm(1,15,1))
A$dish<-"A"
B<-germ(seq(0,24,by=3),rtnorm(1,.6,0.1,lower=0.4,upper=1),rnorm(1,-10,0.1),rnorm(1,15,1))
B$dish<-"B"
C<-germ(seq(0,24,by=3),rtnorm(1,0.6,0.1,lower=0.4,upper=1),rnorm(1,-10,0.1),rnorm(1,15,1))
C$dish<-"C"
#make your data
d<-rbind(A,B,C)
mod<-drm(y~time,fct=LL.3(),data=d,type="continuous")
lines(d$time,predict(mod),lty=2,col="red",lwd=3)
summary(mod)
plot(mod,ylim=c(0,1),xlim=c(0,24),log="",pch=16,type="all")
germ(seq(0,24,by=3),rtnorm(1,12,1,lower=8,upper=20),rnorm(1,-5,0.1),rnorm(1,15,1))
germ(seq(0,24,by=3),round(rtnorm(1,12,1,lower=8,upper=20)),rnorm(1,-5,0.1),rnorm(1,15,1))
germ(seq(0,24,by=3),round(rtnorm(1,12,1,lower=8,upper=20)),rnorm(1,-5,0.1),rnorm(1,15,1))
germ<-function(t,d,b,t50){
round(y)<- d/(1+((t/t50)^b))
return(data.frame(time=t, y=y))
}
germ(seq(0,24,by=3),rtnorm(1,12,1,lower=8,upper=20),rnorm(1,-5,0.1),rnorm(1,15,1))
germ<-function(t,d,b,t50){
y<- d/(1+((t/t50)^b))
return(data.frame(time=t, y=y))
}
germ(seq(0,24,by=3),rtnorm(1,12,1,lower=8,upper=20),rnorm(1,-5,0.1),rnorm(1,15,1))
##3 petridishes of the same treatment, there is probably a loop or apply function for this
A<-germ(seq(0,24,by=3),rtnorm(1,.6,0.1,lower=0.4,upper=1),rnorm(1,-10,0.1),rnorm(1,15,1))
A$dish<-"A"
B<-germ(seq(0,24,by=3),rtnorm(1,.6,0.1,lower=0.4,upper=1),rnorm(1,-10,0.1),rnorm(1,15,1))
B$dish<-"B"
C<-germ(seq(0,24,by=3),rtnorm(1,0.6,0.1,lower=0.4,upper=1),rnorm(1,-10,0.1),rnorm(1,15,1))
C$dish<-"C"
#make your data
d<-rbind(A,B,C)
d$y<-round(d$y)
View(d)
funk<-germ(seq(0,24,by=3),rtnorm(1,12,1,lower=8,upper=20),rnorm(1,-5,0.1),rnorm(1,15,1))
A<-funk
A$dish<-"A"
A<-funk
A$dish<-"A"
B<-funk
B$dish<-"B"
C<-funk
C$dish<-"C"
#make your data
d<-rbind(A,B,C)
d$y<-round(d$y)
View(d)
A<-germ(seq(0,24,by=3),rtnorm(1,12,1,lower=8,upper=20),rnorm(1,-5,0.1),rnorm(1,15,1))
A$dish<-"A"
B<-germ(seq(0,24,by=3),rtnorm(1,12,1,lower=8,upper=20),rnorm(1,-5,0.1),rnorm(1,15,1))
B$dish<-"B"
C<-germ(seq(0,24,by=3),rtnorm(1,12,1,lower=8,upper=20),rnorm(1,-5,0.1),rnorm(1,15,1))
C$dish<-"C"
#make your data
d<-rbind(A,B,C)
d$y<-round(d$y)
View(d)
mod<-drm(y~time,fct=LL.3(),data=d,type="continuous")
summary(mod)
plot(mod,ylim=c(0,1),xlim=c(0,24),log="",pch=16,type="all")
plot(mod,ylim=c(0,20),xlim=c(0,24),log="",pch=16,type="all")
A<-germ(seq(0,24,by=3),rtnorm(1,12,2,lower=8,upper=20),rnorm(1,-5,0.5),rnorm(1,15,2))
A$dish<-"A"
B<-germ(seq(0,24,by=3),rtnorm(1,12,2,lower=8,upper=20),rnorm(1,-5,0.5),rnorm(1,15,2))
B$dish<-"B"
C<-germ(seq(0,24,by=3),rtnorm(1,12,2,lower=8,upper=20),rnorm(1,-5,0.5),rnorm(1,15,2))
C$dish<-"C"
#make your data
d<-rbind(A,B,C)
d$y<-round(d$y)
mod<-drm(y~time,fct=LL.3(),data=d,type="continuous")
summary(mod)
plot(mod,ylim=c(0,20),xlim=c(0,24),log="",pch=16,type="all")
View(d)
library(rstan)
library(rstanarm)
plot(mod,ylim=c(0,20),xlim=c(0,24),log="",pch=16,type="all")
data("Orange", package = "datasets")
orange<-as.data.frame(data("Orange", package = "datasets"))
View(orange)
library(rstan)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
install.packages("rstan", repos = "https://cloud.r-project.org/",
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE))
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
library(rstan)
pkgbuild::has_build_tools(debug = TRUE)
options(mc.cores = parallel::detectCores())
rstan:::rstudio_stanc("Documents/git/timetogerminate/germination_trials/fakeseedmodel.stan")
rstan:::rstudio_stanc("Documents/git/timetogerminate/germination_trials/fakeseedmodel.stan")
rstan:::rstudio_stanc("Documents/git/timetogerminate/germination_trials/fakeseedmodel.stan")
rstan:::rstudio_stanc("Documents/git/timetogerminate/germination_trials/fakeseedmodel.stan")
rstan:::rstudio_stanc("Documents/git/timetogerminate/germination_trials/fakeseedmodel.stan")
rstan:::rstudio_stanc("Documents/git/timetogerminate/germination_trials/fakeseedmodel.stan")
rstan:::rstudio_stanc("Documents/git/timetogerminate/germination_trials/fakeseedmodel.stan")
rstan:::rstudio_stanc("Documents/git/timetogerminate/germination_trials/fakeseedmodel.stan")
rstan:::rstudio_stanc("Documents/git/timetogerminate/germination_trials/fakeseedmodel.stan")
rstan:::rstudio_stanc("Documents/git/timetogerminate/germination_trials/fakeseedmodel.stan")
rstan:::rstudio_stanc("Documents/git/timetogerminate/germination_trials/fakeseedmodel.stan")
rstan:::rstudio_stanc("Documents/git/timetogerminate/germination_trials/fakeseedmodel.stan")
rstan:::rstudio_stanc("Documents/git/timetogerminate/germination_trials/fakeseedmodel.stan")
View(d)
data.list <- with(d,
list(y=y,
t = time,
N = nrow(d),
)
)
data.list <- with(d,
list(y=y,
t = time,
N = nrow(d),
)
)
ata.list <- with(d,
list(y=y,
t = time,
N = nrow(d),
)
)
data.list <- with(d,
list(y=y,
t = time,
N = nrow(d)
)
)
germ.mod = stan('fakeseedmodel.stan', data = data.list
iter = 2500, warmup=1500)
germ.mod = stan('fakeseedmodel.stan', data = data.list,
iter = 2500, warmup=1500)
setwd("~/Documents/git/timetogerminate/germination_trials")
germ.mod = stan('stan/fakeseedmodel.stan', data = data.list,
iter = 2500, warmup=1500)
data.list <- with(d,
list(Y=y,
t = time,
N = nrow(d)
)
)
germ.mod = stan('stan/fakeseedmodel.stan', data = data.list,
iter = 2500, warmup=1500)
rstan:::rstudio_stanc("stan/fakeseedmodel.stan")
rstan:::rstudio_stanc("stan/fakeseedmodel.stan")
germ.mod = stan('stan/fakeseedmodel.stan', data = data.list,
iter = 2500, warmup=1500)
rstan:::rstudio_stanc("stan/fakeseedmodel.stan")
data.list <- with(d,
list(Y=y,
t = time,
N = nrow(d)
)
)
germ.mod = stan('stan/fakeseedmodel.stan', data = data.list,
iter = 2500, warmup=1500)
rstan:::rstudio_stanc("stan/fakeseedmodel.stan")
data.list <- with(d,
list(Y=y,
t = time,
N = nrow(d)
)
)
germ.mod = stan('stan/fakeseedmodel.stan', data = data.list,
iter = 2500, warmup=1500)
rstan:::rstudio_stanc("stan/fakeseedmodel.stan")
germ.mod = stan('stan/fakeseedmodel.stan', data = data.list,
iter = 2500, warmup=1500)
rstan:::rstudio_stanc("stan/fakeseedmodel.stan")
germ.mod = stan('stan/fakeseedmodel.stan', data = data.list,
iter = 2500, warmup=1500)
germ.mod
rstan:::rstudio_stanc("stan/fakeseedmodel.stan")
rstan:::rstudio_stanc("stan/fakeseedmodel.stan")
rstan:::rstudio_stanc("stan/fakeseedmodel.stan")
data.list <- with(d,
list(Y=y,
t = time,
N = nrow(d)
)
)
germ.mod = stan('stan/fakeseedmodel.stan', data = data.list,
iter = 2500, warmup=1500)
rstan:::rstudio_stanc("stan/fakeseedmodel.stan")
germ.mod = stan('stan/fakeseedmodel.stan', data = data.list,
iter = 2500, warmup=1500)
rstan:::rstudio_stanc("stan/fakeseedmodel.stan")
rstan:::rstudio_stanc("stan/fakeseedmodel.stan")
rstan:::rstudio_stanc("stan/fakeseedmodel.stan")
rstan:::rstudio_stanc("stan/fakeseedmodel.stan")
germ.mod = stan('stan/fakeseedmodel.stan', data = data.list,
iter = 2500, warmup=1500)
library(shinystan)
launch_shiny(germ.mod)
launch_shinystan(germ.mod)
rstan:::rstudio_stanc("stan/fakeseedmodel.stan")
germ.mod = stan('stan/fakeseedmodel.stan', data = data.list,
iter = 2500, warmup=1500)
rstan:::rstudio_stanc("stan/fakeseedmodel.stan")
germ.mod = stan('stan/fakeseedmodel.stan', data = data.list,
iter = 2500, warmup=1500)
summary(germ.mod)
launch_shinystan(germ.mod)
rstan:::rstudio_stanc("stan/fakeseedmodel.stan")
rstan:::rstudio_stanc("stan/fakeseedmodel.stan")
germ.mod = stan('stan/fakeseedmodel.stan', data = data.list,
iter = 2500, warmup=1500)
summary(germ.mod)
rstan:::rstudio_stanc("stan/fakeseedmodel.stan")
rstan:::rstudio_stanc("stan/fakeseedmodel.stan")
coef(germ.mod)
germ.mod$coef
germ.mod$coeficients
germ.mod
rstan:::rstudio_stanc("stan/fakeseedmodel.stan")
rstan:::rstudio_stanc("stan/fakeseedmodel.stan")
germ.mod = stan('stan/fakeseedmodel.stan', data = data.list,
iter = 2500, warmup=1500)
summary(germ.mod)
