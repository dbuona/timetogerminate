setwd("~/GitHub/ospree/analyses/bb_analysis")
} else if(length(grep("catchamberlain", getwd()))>0) {
setwd("~/Documents/git/ospree/analyses/bb_analysis")
} else if(length(grep("danielbuonaiuto", getwd()))>0) {
setwd("~/Documents/git/ospree/analyses/bb_analysis")
}else setwd("~/Documents/git/projects/treegarden/budreview/ospree/analyses/bb_analysis")
figpath <- "figures"
# housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
# libraries
library(shinystan)
# Setting working directory. Add in your own path in an if statement for your file structure
if(length(grep("lizzie", getwd())>0)) {
setwd("~/Documents/git/treegarden/budreview/ospree/bb_analysis")
} else if (length(grep("ailene", getwd()))>0) {setwd("~/Documents/GitHub/ospree/analyses/bb_analysis")
}else if(length(grep("Ignacio", getwd()))>0) {
setwd("~/GitHub/ospree/analyses/bb_analysis")
} else if(length(grep("catchamberlain", getwd()))>0) {
setwd("~/Documents/git/ospree/analyses/bb_analysis")
} else if(length(grep("danielbuonaiuto", getwd()))>0) {
setwd("~/Documents/git/ospree/analyses/bb_analysis")
}else setwd("~/Documents/git/projects/treegarden/budreview/ospree/analyses/bb_analysis")
######################################
# Flags to choose for bbstanleadin.R #
######################################
# Master flags! Here you pick if you want the flags for the main model (figure in main text) versus the all spp model (supp)
use.flags.for.mainmodel <- TRUE
use.flags.for.allsppmodel <- FALSE
use.yourown.flagdesign <- FALSE
if(use.flags.for.mainmodel==TRUE & use.flags.for.allsppmodel | use.flags.for.mainmodel==TRUE & use.yourown.flagdesign |
use.yourown.flagdesign  & use.flags.for.allsppmodel | use.flags.for.mainmodel==TRUE & use.flags.for.allsppmodel
& use.yourown.flagdesign) print("ALERT! You have set too many master flags to true, you must pick only one!")
if(use.flags.for.mainmodel){
use.chillports = FALSE
use.zscore = FALSE
use.allspp =FALSE # for the main model this is false
use.multcuespp = FALSE
use.cropspp = FALSE
# Default is species complex use  alltypes of designs
use.expramptypes.fp = TRUE
use.exptypes.fp = FALSE
use.expchillonly = FALSE
}
if(use.flags.for.allsppmodel){
use.chillports = FALSE
use.zscore = FALSE
use.allspp = TRUE
use.multcuespp = FALSE
use.cropspp = TRUE
use.expramptypes.fp = FALSE
use.exptypes.fp = FALSE
use.expchillonly = FALSE
}
if(use.yourown.flagdesign){
use.chillports = TRUE # change to false for using utah instead of chill portions (most models use chill portions z)
use.zscore = TRUE # change to false to use raw predictors
# Default is species complex and no crops
use.allspp = FALSE
use.multcuespp = FALSE
use.cropspp = FALSE
# Default is species complex use  alltypes of designs
use.expramptypes.fp = TRUE
use.exptypes.fp = FALSE
#Default is all chilling data
use.expchillonly = FALSE # change to true for only experimental chilling
#note: with only exp chilling, there is only exp photo and force too.
#also: subsetting to exp chill only reduces dataset to 3 species, <9 studies
}
source("source/bbstanleadin.R")
source("..//misc/getfielddates.R") # f(x) counts up field sample dates separated by a number of days you specify
source("..//misc/getcuesbystudy_fxs.R")
#d is bb.noNA, use this to find the filed weiberger studies
dat<-d
dat$latbi <- paste(dat$genus, dat$species)
dat$fieldsample.date <- as.Date(dat$fieldsample.date, format="%d-%b-%Y")
# Turn things back to numeric so they can be counted
dat$forcetemp <- as.numeric(dat$forcetemp)
dat$forcetemp_night <- as.numeric(dat$forcetemp_night)
dat$photoperiod_night <- as.numeric(dat$photoperiod_night)
dat$photoperiod_day <- as.numeric(dat$photoperiod_day)
dat$chilltemp <- as.numeric(dat$chilltemp)
dat$datasetIDstudy <- paste(dat$datasetID, dat$study)
### These are the fuctions Lizzie made in getfielddates.R and getcuesbystudy_fxs.R
ddatefx.all <- subset(dat, select=c("datasetID", "study", "fieldsample.date"))
ddatefx <- ddatefx.all[!duplicated(ddatefx.all), ]
ddatefx$datasetIDstudy <- paste(ddatefx$datasetID, ddatefx$study)
dates2weeks <- countfieldsample(ddatefx, 14)
# ... and next for each treatment
ddatefxtreat.all <- subset(dat, select=c("datasetID", "study", "fieldsample.date", "force", "photoperiod_day", "chilltemp"))
ddatefxtreat <- ddatefxtreat.all[!duplicated(ddatefxtreat.all), ]
ddatefxtreat$datasetIDstudy <- paste(ddatefxtreat$datasetID, ddatefxtreat$study, ddatefxtreat$force,
ddatefxtreat$photoperiod_day, ddatefxtreat$chilltemp)
dates2weekstreat <- countfieldsample(ddatefxtreat, 14)
names(dates2weekstreat)[names(dates2weekstreat)=="count"] <- "fs.date.count"
weinberger<-filter(dates2weekstreat,fs.date.count>=2)##this selects studies that have more than 2 sample dates 2 weeks apart
#clean it a little bit
weinberger$datasetID<-sapply(strsplit(weinberger$datasetIDstudy, " "), "[", 1)
weinberger$study<-sapply(strsplit(weinberger$datasetIDstudy, " "), "[", 2)
weinberger$force<-sapply(strsplit(weinberger$datasetIDstudy, " "), "[", 3)
weinberger$photo<-sapply(strsplit(weinberger$datasetIDstudy, " "), "[", 4)
weinberger$chill<-sapply(strsplit(weinberger$datasetIDstudy, " "), "[", 5)
#### This is a list of weinberger stduies
weinstuds<-as.vector(paste(weinberger$datasetID, weinberger$study))
weinstuds<-unique(weinstuds)
####make a new column in bb.stan
bb.stan$dataIDstudyID<-paste(bb.stan$datasetID, bb.stan$study)
##add the weinberger infrmation
bb.stan$weinberger<-ifelse(bb.stan$dataIDstudyID %in% weinstuds,1,0)
###check waht species are weinberger
wein.sp<-filter(bb.stan,weinberger==1)
unique(wein.sp$complex.wname)
not.wein<-filter(bb.stan,weinberger==0)
unique(not.wein$complex.wname)
unique(wein.sp$dataIDstudyID) ## how many weinberger experiments
unique(not.wein$dataIDstudyID) ## howmany non weinberger
unique(bb.stan$dataIDstudyID) ##42 total experiments
sp.match<-intersect(unique(wein.sp$complex), unique(not.wein$complex))
sp.match ### species in both
######################
# now we exclude non-weinberger studies that do NOT manipulate chilling
nonwein.expchill <- subset(not.wein, chill_type!="fldest")
unique(nonwein.expchill$dataIDstudyID) ## this is number of experiments that manipulate chilling but not weinberger (16)
count(unique(not.wein$dataIDstudyID)) ##all non weinbergerstudes
count(unique(nonwein.expchill$dataIDstudyID)) ### studies that manipulate chilling with out weinberger
25-16
unique(wein.sp$chill_type) # 11 rows incl falusi97, caffarra11b, heide93
studiestoincl <- c(unique(nonwein.expchill$dataIDstudyID), unique(wein.sp$dataIDstudyID))
##### a data set
bb.stan.alt <- bb.stan[which(bb.stan$dataIDstudyID %in% unique(studiestoincl)),] ##data 1 without feild estiamtes
# or, or .. we include ONLY non-weinberger studies with exp chilling only
nonwein.expchillonly <- subset(not.wein, chill_type=="exp")
studiestoincl.exponly <- c(unique(nonwein.expchillonly$dataIDstudyID), unique(wein.sp$dataIDstudyID))
bb.stan.alt.exponly <- bb.stan[which(bb.stan$dataIDstudyID %in% unique(studiestoincl.exponly)),]
bb.stan.alt.exponly.wein<-filter(bb.stan.alt.exponly,weinberger==1)
unique(bb.stan.alt.exponly.wein$complex.wname)
bb.stan.alt.exponly.nowein<-filter(bb.stan.alt.exponly,weinberger==0)
unique(bb.stan.alt.exponly.nowein$complex.wname)
###match species with wein and non within the subset "bb.stan.alt"
unique(bb.stan.alt$complex)
bb.stan.alt.wein<-filter(bb.stan.alt,weinberger==1)
unique(bb.stan.alt.wein$complex)
bb.stan.alt.nowein<-filter(bb.stan.alt,weinberger==0)
unique(bb.stan.alt.nowein$complex)
sp.match.bb.alt<-intersect(unique(bb.stan.alt.wein$complex), unique(bb.stan.alt.nowein$complex)) ###species that overlap wein and nonwein from bb.stan.alt
sp.match.bb.alt ### only 11 sp
sp.match.bb.alt.exponly<-intersect(unique(bb.stan.alt.exponly.wein$complex), unique(bb.stan.alt.exponly.nowein$complex)) ### species that overlap wein and non wein for bb.stan,alt.exp.only
sp.match.bb.alt.exponly##only 6 species
# now we exclude try to use matching species
# rm fldest
bb.stan.alt.matchsp <- bb.stan.alt[which(bb.stan.alt$complex %in% sp.match.bb.alt),] ###if you want to exclude non-weinberger studesi that dont manipulate chilling
bb.stan.alt.exponly.matchsp<- bb.stan.alt.exponly[which(bb.stan.alt.exponly$complex %in% sp.match.bb.alt.exponly),] ###if want only exp non weinbergers
#bb.stan.matchsp <- bb.stan[which(bb.stan$complex.wname %in% sp.match),] # if you want to incl fldest
#make complexes numeric for stan
bb.stan.alt.matchsp$complex <- as.numeric(as.factor(bb.stan.alt.matchsp$complex.wname))
bb.stan.alt.exponly.matchsp$complex <- as.numeric(as.factor(bb.stan.alt.exponly.matchsp$complex.wname))
##how lare are each stat set
nrow(bb.stan.alt.matchsp) ###889
nrow(bb.stan.alt.exponly.matchsp) ###639
nrow(bb.stan.alt) ##1529
## Set up the bb.stan to use
#bb.stan <- bb.stan.alt
#bb.stan <- bb.stan.alt.exponly
bb.stan <- bb.stan.alt.matchsp # this is target dataset weinberger and non weinberger but only species that appear in both
#bb.stan<-bb.stan.matchsp
#bb.stan<-bb.stan.alt.exponly.matchsp
source("source/bb_zscorepreds.R")### need to re zscore things on new data set
######################
####make datalist
#wein.data.chillports <- with(bb.stan,
#                            list(y=resp,
#                                chill = chill.ports.z,
#                               force = force.z,
#                              photo = photo.z,
#                             weinberger= weinberger,
#0                            sp = complex,
#                          N = nrow(bb.stan),
#                         n_sp = length(unique(bb.stan$complex))
#                   )
#)
if (use.chillports == FALSE){
wein.data.utah <- with(bb.stan,
list(y=resp,
chill = chill.z,
force = force.z,
photo = photo.z,
weinberger= weinberger,
sp = complex,
N = nrow(bb.stan),
n_sp = length(unique(bb.stan$complex))
)
)
}
if (use.chillports == TRUE){
wein.data.utah <- with(bb.stan,
list(y=resp,
chill = chill.ports.z,
force = force.z,
photo = photo.z,
weinberger= weinberger,
sp = complex,
N = nrow(bb.stan),
n_sp = length(unique(bb.stan$complex))
)
)
}
###model
#m2l.ni = stan('stan/weinbergerint.stan', data = wein.data,
# iter = 2500, warmup=1500)
#wein.mod.2 = stan('stan/weinberger_fewint.stan', data = wein.data.chillports,
#            iter = 2500, warmup=1500)
#summary
#wein.mod.3.cp = stan('stan/wein_intpoolonly.stan', data = wein.data.chillports,
#                    iter = 2500, warmup=1500)
##this is the model for the manuscript
wein.mod.3.ut = stan('stan/wein_intpoolonly.stan', data = wein.data.utah,
iter = 2500, warmup=1500)
###some weinberger plotss of raw data
#chill.wein<-ggplot(bb.stan,aes(chill.z,resp, color=complex.wname,shape=as.factor(weinberger)))+geom_point()+geom_smooth(method='lm',se=FALSE,fullrange=TRUE, aes(linetype=as.factor(weinberger)))+theme_bw()
#force.wein<-ggplot(bb.stan,aes(force.z,resp, color=complex.wname,shape=as.factor(weinberger)))+geom_point()+geom_smooth(method='lm',se=FALSE,fullrange=TRUE, aes(linetype=as.factor(weinberger)))+theme_bw()
#photo.wein<-ggplot(bb.stan,aes(photo.z,resp, color=complex.wname,shape=as.factor(weinberger)))+geom_point()+geom_smooth(method='lm',se=FALSE,fullrange=TRUE, aes(linetype=as.factor(weinberger)))+theme_bw()
#chilly<-ggplot(bb.stan,aes(as.factor(weinberger),chill))+geom_boxplot()+theme_bw()
#forcey<-ggplot(bb.stan,aes(as.factor(weinberger),force))+geom_boxplot()+theme_bw()
#photoy<-ggplot(bb.stan,aes(as.factor(weinberger),photo))+geom_boxplot()+theme_bw()
#ggarrange(chill.wein,force.wein,photo.wein,chilly,forcey,photoy, ncol=3,nrow=2, common.legend = TRUE, legend="right")
#wein.force<-ggplot(bb.stan,aes(force,resp, color=as.factor(weinberger)))+geom_point()+geom_smooth(method='lm',fullrange=TRUE)+ggthemes::theme_base()
#wein.photo<-ggplot(bb.stan,aes(photo,resp, color=as.factor(weinberger)))+geom_point()+geom_smooth(method='lm',fullrange=TRUE)+ggthemes::theme_base()
##### r-square models
observed.here <- bb.stan$resp
wein.sum3.ut <- summary(wein.mod.3.ut)$summary
matchysp.ut<-rownames_to_column(as.data.frame(wein.sum3.ut[c("mu_a_sp", "b_force", "b_photo", "b_chill",
"b_weinberger", "b_cw","b_pw","b_fw"),]),"predictor") ## this is out put for manuscript
whichmodel <- wein.sum3.ut
###model plots
spp <- sort(unique(bb.stan$complex))
n <- length(spp)
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
colv = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
#####mu plot
par(mfrow=c(1,1))
par(mar=c(4,4, 3,1))
##or
#####mu plot
par(mfrow=c(1,1))
par(mar=c(4,4, 3,1))
cols <- adjustcolor("indianred3", alpha.f = 0.3)
my.pal <- rep(brewer.pal(n = 12, name = "Paired"), 4)
my.pal <- my.pal[c(2,4,9,10,15,16,19,20,25,31,37)]
# display.brewer.all()
my.pch <- rep(15:18, c(4,4,2,1))
alphahere = 0.4
muplotfx <- function(modelhere, nameforfig, width, height, ylim, xlim, leg1, leg2){
spnum <- length(unique(bb.stan$complex.wname))
#pdf(file.path(figpath, paste("muplot", nameforfig, figpathmore, ".pdf", sep="")),
#   width = width, height = height)
par(xpd=FALSE)
par(mar=c(7,7,4,8))
plot(x=NULL,y=NULL, xlim=xlim, yaxt='n', ylim=ylim,
xlab="Model estimate change in days to BB", ylab="", main=nameforfig)
axis(2, at=1:8, labels=rev(c("Intercept[sp]","Forcing", "Photoperiod", "Chilling","Weinberger","Weinberger \nx Forcing","Weinberger \nx Photoperiod","Weinberger \nx Chilling")), las=1,cex.axis=.75)
abline(v=0, lty=2, col="darkgrey")
rownameshere <- c("mu_a_sp","b_force", "b_photo", "b_chill","b_weinberger","b_fw","b_pw","b_cw")
ppeffects <- c("mu_a_sp","b_force", "b_photo", "b_chill","b_weinberger","b_fw","b_pw","b_cw") # or 1:4 here...
for(i in 1:8){
pos.y<-(8:1)[i]
pos.x<-summary(modelhere)$summary[rownameshere[i],"mean"]
lines(summary(modelhere)$summary[rownameshere[i],c("25%","75%")],rep(pos.y,2),col="darkgrey")
points(pos.x,pos.y,cex=1.5,pch=19,col="darkblue")
for(spsi in 1:spnum){
pos.sps.i<-which(grepl(paste("[",spsi,"]",sep=""),rownames(summary(modelhere)$summary),fixed=TRUE))[1:1]
jitt<-runif(1,0.05,0.4)
pos.y.sps.i<-pos.y-jitt
pos.x.sps.i<-summary(modelhere)$summary[pos.sps.i[i],"mean"]
lines(summary(modelhere)$summary[pos.sps.i[i],c("25%","75%")],rep(pos.y.sps.i,2),
col=alpha(my.pal[spsi], alphahere))
points(pos.x.sps.i,pos.y.sps.i,cex=0.8, pch=my.pch[spsi], col=alpha(my.pal[spsi], alphahere))
}
}
par(xpd=TRUE) # so I can plot legend outside
legend(leg1, leg2, sort(unique(gsub("_", " ", bb.stan$complex.wname))), pch=my.pch[1:spnum],
col=alpha(my.pal[1:spnum], alphahere),
cex=0.75, bty="n", text.font=3)
# dev.off()
}
muplotfx(wein.mod.3.ut, "", 7, 8, c(0,8), c(-20, 60) , 63, 7)
##or
jpeg("../figures/weinberger_MU_4supp.jpeg")
cols <- adjustcolor("indianred3", alpha.f = 0.3)
my.pal <- rep(brewer.pal(n = 12, name = "Paired"), 4)
my.pal <- my.pal[c(2,4,9,10,15,16,19,20,25,31,37)]
# display.brewer.all()
my.pch <- rep(15:18, c(4,4,2,1))
alphahere = 0.4
muplotfx <- function(modelhere, nameforfig, width, height, ylim, xlim, leg1, leg2){
spnum <- length(unique(bb.stan$complex.wname))
#pdf(file.path(figpath, paste("muplot", nameforfig, figpathmore, ".pdf", sep="")),
#   width = width, height = height)
par(xpd=FALSE)
par(mar=c(7,7,4,8))
plot(x=NULL,y=NULL, xlim=xlim, yaxt='n', ylim=ylim,
xlab="Model estimate change in days to budburst", ylab="", main=nameforfig)
axis(2, at=1:8, labels=rev(c("Intercept[sp]","Forcing", "Photoperiod", "Chilling","Weinberger","Weinberger \nx Forcing","Weinberger \nx Photoperiod","Weinberger \nx Chilling")), las=1,cex.axis=.75)
abline(v=0, lty=2, col="darkgrey")
rownameshere <- c("mu_a_sp","b_force", "b_photo", "b_chill","b_weinberger","b_fw","b_pw","b_cw")
ppeffects <- c("mu_a_sp","b_force", "b_photo", "b_chill","b_weinberger","b_fw","b_pw","b_cw") # or 1:4 here...
for(i in 1:8){
pos.y<-(8:1)[i]
pos.x<-summary(modelhere)$summary[rownameshere[i],"mean"]
lines(summary(modelhere)$summary[rownameshere[i],c("25%","75%")],rep(pos.y,2),col="darkgrey")
points(pos.x,pos.y,cex=1.5,pch=19,col="darkblue")
for(spsi in 1:spnum){
pos.sps.i<-which(grepl(paste("[",spsi,"]",sep=""),rownames(summary(modelhere)$summary),fixed=TRUE))[1:1]
jitt<-runif(1,0.05,0.4)
pos.y.sps.i<-pos.y-jitt
pos.x.sps.i<-summary(modelhere)$summary[pos.sps.i[i],"mean"]
lines(summary(modelhere)$summary[pos.sps.i[i],c("25%","75%")],rep(pos.y.sps.i,2),
col=alpha(my.pal[spsi], alphahere))
points(pos.x.sps.i,pos.y.sps.i,cex=0.8, pch=my.pch[spsi], col=alpha(my.pal[spsi], alphahere))
}
}
par(xpd=TRUE) # so I can plot legend outside
legend(leg1, leg2, sort(unique(gsub("_", " ", bb.stan$complex.wname))), pch=my.pch[1:spnum],
col=alpha(my.pal[1:spnum], alphahere),
cex=0.75, bty="n", text.font=3)
# dev.off()
}
muplotfx(wein.mod.3.ut, "", 7, 8, c(0,8), c(-20, 60) , 63, 7)
dev.off()
##or
pdf("../figures/weinberger_MU_4supp.jpeg")
##or
pdf("../figures/weinberger_MU_4supp.jpeg")
cols <- adjustcolor("indianred3", alpha.f = 0.3)
my.pal <- rep(brewer.pal(n = 12, name = "Paired"), 4)
my.pal <- my.pal[c(2,4,9,10,15,16,19,20,25,31,37)]
# display.brewer.all()
my.pch <- rep(15:18, c(4,4,2,1))
alphahere = 0.4
muplotfx <- function(modelhere, nameforfig, width, height, ylim, xlim, leg1, leg2){
spnum <- length(unique(bb.stan$complex.wname))
#pdf(file.path(figpath, paste("muplot", nameforfig, figpathmore, ".pdf", sep="")),
#   width = width, height = height)
par(xpd=FALSE)
par(mar=c(7,7,4,8))
plot(x=NULL,y=NULL, xlim=xlim, yaxt='n', ylim=ylim,
xlab="Model estimate change in days to budburst", ylab="", main=nameforfig)
axis(2, at=1:8, labels=rev(c("Intercept[sp]","Forcing", "Photoperiod", "Chilling","Weinberger","Weinberger \nx Forcing","Weinberger \nx Photoperiod","Weinberger \nx Chilling")), las=1,cex.axis=.75)
abline(v=0, lty=2, col="darkgrey")
rownameshere <- c("mu_a_sp","b_force", "b_photo", "b_chill","b_weinberger","b_fw","b_pw","b_cw")
ppeffects <- c("mu_a_sp","b_force", "b_photo", "b_chill","b_weinberger","b_fw","b_pw","b_cw") # or 1:4 here...
for(i in 1:8){
pos.y<-(8:1)[i]
pos.x<-summary(modelhere)$summary[rownameshere[i],"mean"]
lines(summary(modelhere)$summary[rownameshere[i],c("25%","75%")],rep(pos.y,2),col="darkgrey")
points(pos.x,pos.y,cex=1.5,pch=19,col="darkblue")
for(spsi in 1:spnum){
pos.sps.i<-which(grepl(paste("[",spsi,"]",sep=""),rownames(summary(modelhere)$summary),fixed=TRUE))[1:1]
jitt<-runif(1,0.05,0.4)
pos.y.sps.i<-pos.y-jitt
pos.x.sps.i<-summary(modelhere)$summary[pos.sps.i[i],"mean"]
lines(summary(modelhere)$summary[pos.sps.i[i],c("25%","75%")],rep(pos.y.sps.i,2),
col=alpha(my.pal[spsi], alphahere))
points(pos.x.sps.i,pos.y.sps.i,cex=0.8, pch=my.pch[spsi], col=alpha(my.pal[spsi], alphahere))
}
}
par(xpd=TRUE) # so I can plot legend outside
legend(leg1, leg2, sort(unique(gsub("_", " ", bb.stan$complex.wname))), pch=my.pch[1:spnum],
col=alpha(my.pal[1:spnum], alphahere),
cex=0.75, bty="n", text.font=3)
# dev.off()
}
muplotfx(wein.mod.3.ut, "", 7, 8, c(0,8), c(-20, 60) , 63, 7)
dev.off()
##or
pdf("../figures/weinberger_MU_4supp.pdf")
cols <- adjustcolor("indianred3", alpha.f = 0.3)
my.pal <- rep(brewer.pal(n = 12, name = "Paired"), 4)
my.pal <- my.pal[c(2,4,9,10,15,16,19,20,25,31,37)]
# display.brewer.all()
my.pch <- rep(15:18, c(4,4,2,1))
alphahere = 0.4
muplotfx <- function(modelhere, nameforfig, width, height, ylim, xlim, leg1, leg2){
spnum <- length(unique(bb.stan$complex.wname))
#pdf(file.path(figpath, paste("muplot", nameforfig, figpathmore, ".pdf", sep="")),
#   width = width, height = height)
par(xpd=FALSE)
par(mar=c(7,7,4,8))
plot(x=NULL,y=NULL, xlim=xlim, yaxt='n', ylim=ylim,
xlab="Model estimate change in days to budburst", ylab="", main=nameforfig)
axis(2, at=1:8, labels=rev(c("Intercept[sp]","Forcing", "Photoperiod", "Chilling","Weinberger","Weinberger \nx Forcing","Weinberger \nx Photoperiod","Weinberger \nx Chilling")), las=1,cex.axis=.75)
abline(v=0, lty=2, col="darkgrey")
rownameshere <- c("mu_a_sp","b_force", "b_photo", "b_chill","b_weinberger","b_fw","b_pw","b_cw")
ppeffects <- c("mu_a_sp","b_force", "b_photo", "b_chill","b_weinberger","b_fw","b_pw","b_cw") # or 1:4 here...
for(i in 1:8){
pos.y<-(8:1)[i]
pos.x<-summary(modelhere)$summary[rownameshere[i],"mean"]
lines(summary(modelhere)$summary[rownameshere[i],c("25%","75%")],rep(pos.y,2),col="darkgrey")
points(pos.x,pos.y,cex=1.5,pch=19,col="darkblue")
for(spsi in 1:spnum){
pos.sps.i<-which(grepl(paste("[",spsi,"]",sep=""),rownames(summary(modelhere)$summary),fixed=TRUE))[1:1]
jitt<-runif(1,0.05,0.4)
pos.y.sps.i<-pos.y-jitt
pos.x.sps.i<-summary(modelhere)$summary[pos.sps.i[i],"mean"]
lines(summary(modelhere)$summary[pos.sps.i[i],c("25%","75%")],rep(pos.y.sps.i,2),
col=alpha(my.pal[spsi], alphahere))
points(pos.x.sps.i,pos.y.sps.i,cex=0.8, pch=my.pch[spsi], col=alpha(my.pal[spsi], alphahere))
}
}
par(xpd=TRUE) # so I can plot legend outside
legend(leg1, leg2, sort(unique(gsub("_", " ", bb.stan$complex.wname))), pch=my.pch[1:spnum],
col=alpha(my.pal[1:spnum], alphahere),
cex=0.75, bty="n", text.font=3)
# dev.off()
}
muplotfx(wein.mod.3.ut, "", 7, 8, c(0,8), c(-20, 60) , 63, 7)
dev.off()
##Began by Dan and Lizzie late Feb 2019
###updated most recently by Dan on April 4 2019
##Purpose is to simulat germiantion data a kind to Dan's trial
rm(list=ls())
options(stringsAsFactors = FALSE)
graphics.off()
loadmodels <- FALSE
runpart1 <- FALSE
if(length(grep("Lizzie", getwd())>0)) {
setwd("~/Documents/git/projects/misc/dan/timetogerminate/germination_trials")
} else setwd("~/Documents/git/timetogerminate/germination_trials")
load("fake_germ_models") # emw: What is this, do I need it? DB...no its only so I can load models but none currently work.
Y_mean <- rstan::extract(modintxn, pars='Y_mean')
Y_mean <- rstan::extract(modintxn, pars=Y_mean)
Y_mean <- rstan::extract(modintxn, pars=c("Y_mean"))
rstan:::rstudio_stanc("stan/fakeseedgoodchill_winters.stan")
rstan:::rstudio_stanc("stan/fakeseedgoodchill_winters.stan")
#interaction
modintxn = stan('stan/fakeseedgoodchill_winters.stan', data = data.list2,
iter = 6000, warmup=5000, chain=1)
rstan:::rstudio_stanc("stan/fakeseedgoodchill_winters.stan")
rstan:::rstudio_stanc("stan/fakeseedgoodchill_winters.stan")
data.list2<-with(df.adj2,
list(Y=y,
t=time,
chill=chilltreat,
force=forcetreat,
N=nrow(df.adj2) # datalist
)
)
#interaction
modintxn = stan('stan/fakeseedgoodchill_winters.stan', data = data.list2,
iter = 6000, warmup=5000, chain=1)
Y_mean <- rstan::extract(modintxn, pars=c("Y_mean"))
Y_mean_cred <- apply(Y_mean$Y_mean, 2, quantile, c(0.05, 0.95))
Y_mean_mean <- apply(Y_mean$Y_mean, 2, mean)
Y_pred <- rstan::extract(modintxn, "Y_pred")
Y_pred_cred <- apply(Y_pred$Y_pred, 2, quantile, c(0.05, 0.95))
Y_pred_mean <- apply(Y_pred$Y_pred, 2, mean)
plot(df.adj2$y ~ df.adj2$time, xlab="time", ylab="germination",
ylim=c(0, 1), main="Non-linear Growth Curve")
lines(df.adj2$time, Y_mean_mean)
points(df.adj2$time, Y_pred_mean, pch=19)
lines(df.adj2$time, Y_mean_cred[1,], col=4)
lines(df.adj2$time, Y_mean_cred[2,], col=4)
lines(df.adj2$time, Y_pred_cred[1,], col=2)
lines(df.adj2$time, Y_pred_cred[2,], col=2)
legend(x="bottomright", bty="n", lwd=2, lty=c(NA, NA, 1, 1,1),
legend=c("observation", "prediction", "mean prediction",
"90% mean cred. interval", "90% pred. cred. interval"),
col=c(1,1,1,4,2),  pch=c(1, 19, NA, NA, NA))
plot(df.adj2$y ~ df.adj2$time, xlab="time", ylab="germination",
ylim=c(0, 1), main="Non-linear Growth Curve")
plot(df.adj2$y ~ df.adj2$time, xlab="time", ylab="germination",
ylim=c(0, 1), main="Non-linear Growth Curve")
lines(df.adj2$time, Y_mean_mean)
plot(df.adj2$y ~ df.adj2$time, xlab="time", ylab="germination",
ylim=c(0, 1), main="Non-linear Growth Curve")
points(df.adj2$time, Y_pred_mean, pch=19)
points(df.adj2$time, Y_pred_mean, pch=19, col=4)
plot(df.adj2$y ~ df.adj2$time, xlab="time", ylab="germination",
ylim=c(0, 1), main="Non-linear Growth Curve")
points(df.adj2$time, Y_pred_mean, pch=19, col=4)
plot(df.adj2$y ~ df.adj2$time, xlab="time", ylab="germination",
ylim=c(0, 1), main="Non-linear Growth Curve")
plot(c(0,1),c(0,20) xlab="time", ylab="germination",
ylim=c(0, 1), main="Non-linear Growth Curve")
plot(c(0,1),c(0,20) xlab="time", ylab="germination",
ylim=c(0, 1), main="Non-linear Growth Curve")
plot(c(0,1),c(0,20), xlab="time", ylab="germination",
ylim=c(0, 1), main="Non-linear Growth Curve")
lines(df.adj2$time, Y_mean_mean)
lines(df.adj2$time, Y_mean_mean)
plot(c(0,20),c(0,1), xlab="time", ylab="germination",
ylim=c(0, 1), main="Non-linear Growth Curve")
lines(df.adj2$time, Y_mean_mean)
points(df.adj2$time, Y_pred_mean, pch=19, col=4)
plot(c(0,20),c(0,1), xlab="time", ylab="germination",
ylim=c(0, 1), main="Non-linear Growth Curve")
plot(xlab="time", ylab="germination",
ylim=c(0, 1),xlim=c(0,20) main="Non-linear Growth Curve")
plot(xlab="time", ylab="germination",
ylim=c(0, 1),xlim=c(0,20), main="Non-linear Growth Curve")
plot(xlab="time", ylab="germination",
ylim=c(0, 1),xlim=c(0,20), main="Non-linear Growth Curve")
c(0,20),c(0,1),
plot(c(0,20),c(0,1), xlab="time", ylab="germination",
ylim=c(0, 1),xlim=c(0,20) main="Non-linear Growth Curve")
plot(c(0,20),c(0,1), xlab="time", ylab="germination",
ylim=c(0, 1),xlim=c(0,20), main="Non-linear Growth Curve")
lines(df.adj2$time, Y_mean_mean)
lines(df.adj2$time, Y_pred_mean, pch=19, col=4)
modintxn.mega = stan('stan/fakeseedgoodchill_winters.stan', data = data.list2,
iter = 12000, warmup=11000, chain=4)
summary(modintxn.mega)$summary[c("a_d","bc_d","bf_d","a_beta","bc_beta","bf_beta","a_t50","bc_t50","bf_t50","inter_d","inter_beta","inter_t50","sigma"),] #horrible Rhats
save.image("fake_germ_models")
