# This next equation needs to more closely match your stan code.
# Here's the critcial bits of the stan model
# y_hat[i] =(b_chill_d*chill[i]+a_d)/
# (1+(((t[i])/(b_chill_t50*chill[i]+a_t50))^(b_chill_beta*chill[i]+a_beta)))
# Also note: The only sigma you probably need in your Stan model is this one:
# Y ~ normal(y_hat, sigma)
# But you had three more below ... need to adjust .... here's my basic idea of how it should work
for(k in 1:repz){
y <- c()
for (l in c(1:length(time))){
yhere <- (chill.d*chilltreat[i]+d.muhere)/
(1+((time[l]/(chill.t50*chilltreat[i]+t50here))^
(chill.beta*chilltreat[i]*betahere)))
y <- rbind(y, yhere)
}
# I add in sigma_y here...
dfrepadd <- data.frame(time=time, y=rnorm(length(y), y, sigma_y), ID=rep(i, length(time)),
chilltreat=chilltreathere)
dfhere <- rbind(dfhere, dfrepadd)
}
df <- rbind(df, dfhere)
}
}
test.dat <- df
test.dat$y <- round(test.dat$y)
plot(y~time, data=test.dat)
?rep()
?rep()
df <- data.frame(time=numeric(), y=numeric(), ID=numeric(), chilltreat=numeric())
for(i in c(1:length(chilltreat))){ # i <- 1
chilltreathere <- chilltreat[i]
for(j in c(1:length(d.mus))){ # j <- 1
d.muhere <- d.mus[j]
t50here <- t50s[j]
betahere <- betas[j]
dfhere <- data.frame(time=numeric(), y=numeric(), ID=numeric(), chilltreat=numeric())
# This next equation needs to more closely match your stan code.
# Here's the critcial bits of the stan model
# y_hat[i] =(b_chill_d*chill[i]+a_d)/
# (1+(((t[i])/(b_chill_t50*chill[i]+a_t50))^(b_chill_beta*chill[i]+a_beta)))
# Also note: The only sigma you probably need in your Stan model is this one:
# Y ~ normal(y_hat, sigma)
# But you had three more below ... need to adjust .... here's my basic idea of how it should work
for(k in 1:repz){
y <- c()
for (l in c(1:length(time))){
yhere <- (chill.d*chilltreat[i]+d.muhere)/
(1+((time[l]/(chill.t50*chilltreat[i]+t50here))^
(chill.beta*chilltreat[i]*betahere)))
y <- rbind(y, yhere)
}
# I add in sigma_y here...
dfrepadd <- data.frame(time=time, y=rnorm(length(y), y, sigma_y), ID=rep(9, length(time)),
chilltreat=chilltreathere)
dfhere <- rbind(dfhere, dfrepadd)
}
df <- rbind(df, dfhere)
}
}
test.dat <- df
test.dat$y <- round(test.dat$y)
plot(y~time, data=test.dat)
chilltreat <- c(0,1,2) # We need to use this in the equation! Just the way you do in Stan
# Now, if we are starting simple, with just two levels of chill, we may need only one value of d, t50, beta ? Leaving it for now as I am not sure what this is doing...
d.mus <- 4
t50s <- 20
betas <- 10
chill.d <- 0
chill.t50 <- -5
chill.beta <- -1
sigma_y <- 0.1
repz=10
##same parements in all functions
time <- seq(0,24,by=3)
d.low <- 0
d.up <- 20
df <- data.frame(time=numeric(), y=numeric(), ID=numeric(), chilltreat=numeric())
for(i in c(1:length(chilltreat))){ # i <- 1
chilltreathere <- chilltreat[i]
for(j in c(1:length(d.mus))){ # j <- 1
d.muhere <- d.mus[j]
t50here <- t50s[j]
betahere <- betas[j]
dfhere <- data.frame(time=numeric(), y=numeric(), ID=numeric(), chilltreat=numeric())
# This next equation needs to more closely match your stan code.
# Here's the critcial bits of the stan model
# y_hat[i] =(b_chill_d*chill[i]+a_d)/
# (1+(((t[i])/(b_chill_t50*chill[i]+a_t50))^(b_chill_beta*chill[i]+a_beta)))
# Also note: The only sigma you probably need in your Stan model is this one:
# Y ~ normal(y_hat, sigma)
# But you had three more below ... need to adjust .... here's my basic idea of how it should work
for(k in 1:repz){
y <- c()
for (l in c(1:length(time))){
yhere <- (chill.d*chilltreat[i]+d.muhere)/
(1+((time[l]/(chill.t50*chilltreat[i]+t50here))^
(chill.beta*chilltreat[i]*betahere)))
y <- rbind(y, yhere)
}
# I add in sigma_y here...
dfrepadd <- data.frame(time=time, y=rnorm(length(y), y, sigma_y), ID=rep(1:9, length(y)),
chilltreat=chilltreathere)
dfhere <- rbind(dfhere, dfrepadd)
}
df <- rbind(df, dfhere)
}
}
test.dat <- df
test.dat$y <- round(test.dat$y)
plot(y~time, data=test.dat)
?rep()
96+50+1447+108+300+500
96+50+1447+108+300+500+400
dat <- data.frame(daytime = as.POSIXct(sprintf("%02i:%02i", 1:23, 2 * (1:23)), format = "%H:%M"),
y = 1:23)
ggplot(dat, aes(daytime, y)) + geom_point() +
scale_x_datetime(labels = function(x) format(x, format = "%H:%M"))
Library(ggplot)
library(ggplot)
library(ggplot2)
dat <- data.frame(daytime = as.POSIXct(sprintf("%02i:%02i", 1:23, 2 * (1:23)), format = "%H:%M"),
y = 1:23)
ggplot(dat, aes(daytime, y)) + geom_point() +
scale_x_datetime(labels = function(x) format(x, format = "%H:%M"))
ggplot(dat, aes(daytime, y)) + geom_point()
ggplot(dat, aes(daytime, y)) + geom_point() +
scale_x_datetime(labels = function(x) format(x, format = "%H:%M"))
ggplot(dat, aes(daytime, y)) + geom_point()
ggplot(dat, aes(daytime, y)) + geom_point() +
scale_x_datetime(labels = function(x) format(x, format = "%H:%M"))
rm(list=ls())
options(stringsAsFactors = FALSE)
graphics.off()
library(ggplot2)
library(ggpubr)
library(gridExtra)
library(grid)
library(gtable)
library(ggthemes)
GDH<-c(376,408,504,472,384,480,480,384)
photo<-c(11,15,15,11,11,11,15,15)
periodicities<-c("coupled","coupled","coupled","coupled","uncoupled","uncoupled","uncoupled","uncoupled")
dat<-data.frame(GDH,photo,periodicities)
x<-c(10.8,10.8,15.2,15.2)
y<-c(382,482,382,482)
xy<-data.frame(x,y)
ploty<-ggplot(dat,(aes(x=photo)))+geom_point(aes(y=GDH,color=periodicities),size=4)+xlim(8,18)+ylim(350,520)+theme_base()+geom_polygon(aes(x=photo,y=GDH,color=periodicities,fill=periodicities),alpha=0.5) +scale_color_manual(values=c("rosybrown","gray10"))+scale_fill_manual(values=c("rosybrown","gray10"))
plotty2<-ploty+geom_rect(dat,mapping=aes(xmin=10.9,xmax=15.1,ymin=382,ymax=482),fill=NA,color="black",size=0.2,linetype="dashed")
plotty2<-plotty2+geom_point(xy,mapping=aes(x,y),shape=8,size=4)+theme(legend.position = "left")
plotty2
xx<-c(1:24)
yy<-rep(25,24)
zz<-rep(15,24)
aa<-c(30,30,30,30,30,30,30,30,30,30,20,20,20,20,20,20,20,20,20,20,20,20,20,20)
bb<-c(30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,20,20,20,20,20,20,20,20)
cc<-c(20,20,20,20,20,20,20,20,20,20,10,10,10,10,10,10,10,10,10,10,10,10,10,10)
dd<-c(20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,10,10,10,10,10,10,10,10)
ee<-c(30,30,30,30,30,30,30,30,30,30,30,30,20,20,20,20,20,20,20,20,20,20,20,20)
ff<-c(20,20,20,20,20,20,20,20,20,20,20,20,10,10,10,10,10,10,10,10,10,10,10,10)
dat.simple<-data.frame(xx,yy,zz,aa,bb,cc,dd,ee,ff)
a<-ggplot(dat.simple,aes(xx,yy))+geom_rect(dat.simple,mapping=aes(xmin=10,xmax=24,ymin=0,ymax=30),fill="gray")+theme_base()+geom_line(aes(xx,yy),color="red")+scale_x_continuous(breaks=c(4,8,12,16,20,24))+scale_y_continuous(breaks=c(0,5,10,15,20,25,30))+ labs(y = "temperature",x = "hours")+ggtitle("warm/short")+theme(plot.title=element_text( hjust=0.5, vjust=0.5))
b<-ggplot(dat.simple,aes(xx,yy))+geom_rect(dat.simple,mapping=aes(xmin=16,xmax=24,ymin=0,ymax=30),fill="gray")+theme_base()+geom_line(aes(xx,yy),color="red")+scale_x_continuous(breaks=c(4,8,12,16,20,24))+scale_y_continuous(breaks=c(0,5,10,15,20,25,30))+ labs(y = "temperature",x = "hours")+ggtitle("warm/long")+theme(plot.title=element_text( hjust=0.5, vjust=0.5))
c<-ggplot(dat.simple,aes(xx,yy))+geom_rect(dat.simple,mapping=aes(xmin=10,xmax=24,ymin=0,ymax=30),fill="gray")+theme_base()+geom_line(aes(xx,zz),color="blue")+scale_x_continuous(breaks=c(4,8,12,16,20,24))+scale_y_continuous(breaks=c(0,5,10,15,20,25,30))+ labs(y = "temperature",x = "hours")+ggtitle("cool/short")+theme(plot.title=element_text( hjust=0.5, vjust=0.5))
d<-ggplot(dat.simple,aes(xx,yy))+geom_rect(dat.simple,mapping=aes(xmin=16,xmax=24,ymin=0,ymax=30),fill="gray")+theme_base()+geom_line(aes(xx,zz),color="blue")+scale_x_continuous(breaks=c(4,8,12,16,20,24))+scale_y_continuous(breaks=c(0,5,10,15,20,25,30))+ labs(y = "temperature",x = "hours")+ggtitle("cool/long")+theme(plot.title=element_text( hjust=0.5, vjust=0.5))
flat<-ggarrange(a, b,c, d, ncol=2, nrow=2, common.legend = TRUE, legend="bottom")
?ggarrange()
aaa<-ggplot(dat.simple,aes(xx,aa))+geom_rect(dat.simple,mapping=aes(xmin=10,xmax=24,ymin=0,ymax=30),fill="gray")+theme_base()+geom_line(aes(xx,aa),color="red")+scale_x_continuous(breaks=c(4,8,12,16,20,24))+scale_y_continuous(breaks=c(0,5,10,15,20,25,30))+ labs(y = "temperature",x = "hours")+ggtitle("warm/short")+theme(plot.title=element_text( hjust=0.5, vjust=0.5))
bbb<-ggplot(dat.simple,aes(xx,bb))+geom_rect(dat.simple,mapping=aes(xmin=16,xmax=24,ymin=0,ymax=30),fill="gray")+theme_base()+geom_line(aes(xx,bb),color="red")+scale_x_continuous(breaks=c(4,8,12,16,20,24))+scale_y_continuous(breaks=c(0,5,10,15,20,25,30))+ labs(y = "temperature",x = "hours")+ggtitle("warm/long")+theme(plot.title=element_text( hjust=0.5, vjust=0.5))
ccc<-ggplot(dat.simple,aes(xx,cc))+geom_rect(dat.simple,mapping=aes(xmin=10,xmax=24,ymin=0,ymax=30),fill="gray")+theme_base()+geom_line(aes(xx,cc),color="blue")+scale_x_continuous(breaks=c(4,8,12,16,20,24))+scale_y_continuous(breaks=c(0,5,10,15,20,25,30))+ labs(y = "temperature",x = "hours")+ggtitle("cool/short")+theme(plot.title=element_text( hjust=0.5, vjust=0.5))
ddd<-ggplot(dat.simple,aes(xx,dd))+geom_rect(dat.simple,mapping=aes(xmin=16,xmax=24,ymin=0,ymax=30),fill="gray")+theme_base()+geom_line(aes(xx,dd),color="blue")+scale_x_continuous(breaks=c(4,8,12,16,20,24))+scale_y_continuous(breaks=c(0,5,10,15,20,25,30))+ labs(y = "temperature",x = "hours")+ggtitle("cool/long")+theme(plot.title=element_text( hjust=0.5, vjust=0.5))
covarying<-ggarrange(aaa, bbb,ccc, ddd, ncol=2, nrow=2, common.legend = TRUE, legend="bottom")
aaaa<-ggplot(dat.simple,aes(xx,ee))+geom_rect(dat.simple,mapping=aes(xmin=10,xmax=24,ymin=0,ymax=30),fill="gray")+theme_base()+geom_line(aes(xx,ee),color="red")+scale_x_continuous(breaks=c(4,8,12,16,20,24))+scale_y_continuous(breaks=c(0,5,10,15,20,25,30))+ labs(y = "temperature",x = "hours")+ggtitle("warm/short")+theme(plot.title=element_text( hjust=0.5, vjust=0.5))
bbbb<-ggplot(dat.simple,aes(xx,ee))+geom_rect(dat.simple,mapping=aes(xmin=16,xmax=24,ymin=0,ymax=30),fill="gray")+theme_base()+geom_line(aes(xx,ee),color="red")+scale_x_continuous(breaks=c(4,8,12,16,20,24))+scale_y_continuous(breaks=c(0,5,10,15,20,25,30))+ labs(y = "temperature",x = "hours")+ggtitle("warm/long")+theme(plot.title=element_text( hjust=0.5, vjust=0.5))
cccc<-ggplot(dat.simple,aes(xx,ff))+geom_rect(dat.simple,mapping=aes(xmin=10,xmax=24,ymin=0,ymax=30),fill="gray")+theme_base()+geom_line(aes(xx,ff),color="blue")+scale_x_continuous(breaks=c(4,8,12,16,20,24))+scale_y_continuous(breaks=c(0,5,10,15,20,25,30))+ labs(y = "temperature",x = "hours")+ggtitle("cool/short")+theme(plot.title=element_text( hjust=0.5, vjust=0.5))
dddd<-ggplot(dat.simple,aes(xx,ff))+geom_rect(dat.simple,mapping=aes(xmin=16,xmax=24,ymin=0,ymax=30),fill="gray")+theme_base()+geom_line(aes(xx,ff),color="blue")+scale_x_continuous(breaks=c(4,8,12,16,20,24))+scale_y_continuous(breaks=c(0,5,10,15,20,25,30))+ labs(y = "temperature",x = "hours")+ggtitle("cool/long")+theme(plot.title=element_text( hjust=0.5, vjust=0.5))
noncovarying<-ggarrange(aaaa, bbbb,cccc, dddd, ncol=2, nrow=2, common.legend = TRUE, legend="bottom")
grid.arrange(flat,covarying,noncovarying,ncol=3)
grid.rect(width = .5, height = .5, gp = gpar(lwd = 2, col = "black", fill = NA,hjust="left",vjust="top"))
grid.arrange(flat,covarying,noncovarying,ncol=3)
View(dat.simple)
View(dat.simple)
xy
dat
########
temp<-c(12,12,12,12)
light<-c(11,11,15,15)
########
temp<-c(12,12,12,12)
light<-c(11,11,15,15)
treat<-c("warm/short","cool/short","warm/long","warm/long")
dawn<-data.frame(temp,light,treat)
dawn$dawn.offset$(dan$temp-dawn$light)
dawn$dawn.offset$dan$temp-dawn$light
dawn$dawn.offset<-dan$temp-dawn$light
dawn$dawn.offset<-dawn$temp-dawn$light
View(dawn)
require(rstan)
require(geiger)
require(MCMCglmm)
# load data
data(geospiza)
dat <- geospiza$geospiza.data
View(dat)
# create fake sample of trees
tr <- drop.tip(geospiza$geospiza.tree, 'olivacea')
trees <- vector('list', 15)
for(i in 1:15) trees[[i]] <- tr
# get the inverse of the phylovcv, order all to match data
invA <- lapply(trees, function(x) solve(vcv.phylo(x))[row.names(dat), row.names(dat)])
stdat <- list(
N=dim(dat)[1],
y=dat$wingL,
x=dat$tarsusL,
invA=invA,
Ntree=length(invA), #number of trees
p=rep(1/length(invA), length(invA)) #probability of sampling each tree
)
phymodel <- "
data {
int<lower=0> N; //species
int<lower=0> Ntree; //number of trees
vector[N] y;
real x[N];
matrix[N,N] invA[Ntree]; //array of inverse of phylovcv?
}
parameters {
real alpha; //intercept
real beta; //slope
real<lower=0> tau; // scaling factor
simplex[Ntree] theta; //mixture sampling?
}
transformed parameters{
real sigma; //regression error
sigma <- 1/sqrt(tau);
}
model {
vector[N] mu; //multivariate normal mean
//priors
alpha ~ normal(0, 10);
beta ~ normal(0, 10);
sigma ~ uniform(0,1000);
tau ~ gamma(1,1);
theta ~ uniform(0,1);
for(n in 1:N){
mu[n] <- alpha+beta*x[n];
}
y ~ multi_normal_prec(mu, tau*invA[Ntree]);
}
"
phystan = stan(model_name="phylogenetic regression", model_code = phymodel, data=stdat , iter = 1000, chains = 2)
stdat <- list(
N=dim(dat)[1],
y=dat$wingL,
x=dat$tarsusL,
invA=invA,
Ntree=length(invA), #number of trees
p=rep(1/length(invA), length(invA)) #probability of sampling each tree
)
stdat <- list(
N=dim(dat)[1],
y=dat$wingL,
x=dat$tarsusL,
invA=invA,
Ntree=length(invA), #number of trees
p=rep(1/length(invA), length(invA)) #probability of sampling each tree
)
stdat <- list(
N=dim(dat)[1],
y=dat$wingL,
x=dat$tarsusL,
invA=invA,
Ntree=length(invA), #number of trees
p=rep(1/length(invA), length(invA)) #probability of sampling each tree
)
##Began by Dan and Lizzie late Feb 2019
###updated most recently by Dan on March 1 2019
##Purpose is to simulat germiantion data a kind to Dan's trial
rm(list=ls())
options(stringsAsFactors = FALSE)
graphics.off()
loadmodels <- FALSE
if(length(grep("Lizzie", getwd())>0)) {
setwd("~/Documents/git/projects/misc/dan/timetogerminate/germination_trials")
} else setwd("~/Documents/git/timetogerminate/germination_trials")
if(loadmodels){
load("fake_germ_models") # emw: What is this, do I need it? DB...no its only so I can load models but none currently work.
}
library(rstan)
library(tidyr)
library(drc)
library(dplyr)
library(shinystan)
library(extraDistr)
######Chilling only
time<-seq(0,24,by=1) #time of each trial
treat<-c(0,1) # level of chilling, continuous data
sigma_y <- 0.1 ## small signmal
#Start with data where only t50 changes
t50.a<-15 #intercept of t50
t50.b<--5 # slope of t50 with chilling
beta.a<-6 #intercept of beta (shape paramenter)
d.a<-10 # intercept of d (maximum germination)
repz<-seq(1,50,by=1) ## number of replicates
###for starters assme a 100% germination scenario, no (D parameter)
df<-data.frame(time=numeric(), y=numeric(),chilltreat=numeric(),ID=numeric())  ##generate fake data
for (i in c(1:length(treat))){
y <- c()
for(k in c(1:length(repz))){
#y<-(d.b*treat[i]+d.a)/(1+((time/(t50.b*treat[i]+t50.a))^-(beta.b*treat[i]+beta.a)))
y<-d.a/(1+((time/(t50.b*treat[i]+t50.a))^-(beta.a)))
dfhere <- data.frame(time=time, y=rtnorm(length(y),y,sigma_y,a=0,b=Inf),chilltreat=rep(treat[i], length(y)),ID=rep(repz[k],length(y))) ## make a data frame for each level, this over rights so
df <- rbind(df, dfhere) ## rbind it here for safty
}
}
ploty<-ggplot(df,aes(time,y))+geom_point(aes(color=as.factor(chilltreat)))
ploty
ploty+geom_line(stat = "summary", fun.y = mean, aes(color=as.factor(chilltreat))) ### plot point with mean lines these datas look good
rstan:::rstudio_stanc("stan/fakeseed_chillonly.stan")
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
data.list<-with(df.adj,
list(Y=y,
t=time,
chill=chilltreat,
N=nrow(df.adj)
)
)
# mattches
######################M#########
###Part II chilling (0,1) alters  t50 and beta but not d#################################
df.adj<-df
df.adj$time<-ifelse(df.adj$time==0,0.0001,df.adj$time) ### I think the log logistic distrubtion can't handle when time=0 because it creates log of (0) situation
data.list<-with(df.adj,
list(Y=y,
t=time,
chill=chilltreat,
N=nrow(df.adj)
)
)
###below are the same model coded in different ways.
mod3 = stan('stan/fakeseedgoodchill.stan', data = data.list,                        ##4/1/19
iter = 3000, warmup=2000)
mod3.drc<-drm(y~time,chilltreat,fct=LL.3(),data=df,type="continuous")
summary(mod3.drc)
mod4 = stan('stan/fakeseed_chillonly.stan', data = data.list,
iter = 3000, warmup=2000) ###  250 divergent transitions
rstan:::rstudio_stanc("stan/fakeseed_chillonly.stan")
rstan:::rstudio_stanc("stan/fakeseed_chillonly.stan")
rstan:::rstudio_stanc("stan/fakeseed_chillonly.stan")
rstan:::rstudio_stanc("stan/fakeseed_chillonly.stan")
rstan:::rstudio_stanc("stan/fakeseed_chillonly.stan")
rstan:::rstudio_stanc("stan/fakeseed_chillonly.stan")
rstan:::rstudio_stanc("stan/fakeseed_chillonly.stan")
rstan:::rstudio_stanc("stan/fakeseed_chillonly.stan")
rstan:::rstudio_stanc("stan/fakeseed_chillonly.stan")
rstan:::rstudio_stanc("stan/fakeseed_chillonly.stan")
rstan:::rstudio_stanc("stan/fakeseed_chillonly.stan")
rstan:::rstudio_stanc("stan/fakeseed_chillonly.stan")
rstan:::rstudio_stanc("stan/fakeseed_chillonly.stan")
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
###below are the same model coded in different ways.
mod3 = stan('stan/fakeseedgoodchill.stan', data = data.list,                        ##4/1/19
iter = 3000, warmup=2000)
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
###below are the same model coded in different ways.
mod3 = stan('stan/fakeseedgoodchill.stan', data = data.list,                        ##4/1/19
iter = 3000, warmup=2000)
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
###below are the same model coded in different ways.
mod3 = stan('stan/fakeseedgoodchill.stan', data = data.list,                        ##4/1/19
iter = 3000, warmup=2000)
mod3.sum<-summary(mod3)$summary
mod3.sum<-summary(mod3)$summary
mod3.sum[c("a_t50","d","beta","b_t50","sigma"),]
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
data.list<-with(df.adj,
list(Y=y,
t=time,
chill=chilltreat,
N=nrow(df.adj)
)
)
###below are the same model coded in different ways.
mod3 = stan('stan/fakeseedgoodchill.stan', data = data.list,  ##4/3/19 only 5 divergent transitions
iter = 3000, warmup=2000)
mod3.sum<-summary(mod3)$summary
mod3.sum[c("a_t50","d","beta","b_t50","sigma"),] ###but very wrong parameter estimate for a_t50 and b_t50
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
###below are the same model coded in different ways.
mod3 = stan('stan/fakeseedgoodchill.stan', data = data.list,  ##4/3/19 only 5 divergent transitions
iter = 3000, warmup=2200)
mod3.sum<-summary(mod3)$summary
mod3.sum[c("a_t50","d","beta","b_t50","sigma"),] ###but very wrong parameter estimate for a_t50 and b_t50
rm(list=ls())
options(stringsAsFactors = FALSE)
graphics.off()
loadmodels <- FALSE
if(length(grep("Lizzie", getwd())>0)) {
setwd("~/Documents/git/projects/misc/dan/timetogerminate/germination_trials")
} else setwd("~/Documents/git/timetogerminate/germination_trials")
if(loadmodels){
load("fake_germ_models") # emw: What is this, do I need it? DB...no its only so I can load models but none currently work.
}
library(rstan)
library(tidyr)
library(drc)
library(dplyr)
library(shinystan)
library(extraDistr)
######Chilling only
time<-seq(0,24,by=1) #time of each trial
treat<-c(0,1) # level of chilling, continuous data
sigma_y <- 0.1 ## small signmal
#Start with data where only t50 changes
t50.a<-15 #intercept of t50
t50.b<--5 # slope of t50 with chilling
beta.a<-6 #intercept of beta (shape paramenter)
######Chilling only
time<-seq(0,24,by=1) #time of each trial
treat<-c(0,1) # level of chilling, continuous data
sigma_y <- 0.01 ## small signmal
#Start with data where only t50 changes
t50.a<-15 #intercept of t50
t50.b<--5 # slope of t50 with chilling
beta.a<-6 #intercept of beta (shape paramenter)
d.a<-0.9 # intercept of d (maximum germination)
repz<-seq(1,50,by=1) ## number of replicates
###for starters assme a 100% germination scenario, no (D parameter)
df<-data.frame(time=numeric(), y=numeric(),chilltreat=numeric(),ID=numeric())  ##generate fake data
for (i in c(1:length(treat))){
y <- c()
for(k in c(1:length(repz))){
#y<-(d.b*treat[i]+d.a)/(1+((time/(t50.b*treat[i]+t50.a))^-(beta.b*treat[i]+beta.a)))
y<-d.a/(1+((time/(t50.b*treat[i]+t50.a))^-(beta.a)))
dfhere <- data.frame(time=time, y=rtnorm(length(y),y,sigma_y,a=0,b=Inf),chilltreat=rep(treat[i], length(y)),ID=rep(repz[k],length(y))) ## make a data frame for each level, this over rights so
df <- rbind(df, dfhere) ## rbind it here for safty
}
}
ploty<-ggplot(df,aes(time,y))+geom_point(aes(color=as.factor(chilltreat)))
ploty
ploty+geom_line(stat = "summary", fun.y = mean, aes(color=as.factor(chilltreat))) ### plot point with mean lines these datas look good
### PART 1: NO TREATMENTS ###########
notreat<-filter(df,chilltreat==1) ## do this for models with out any predictors)
ggplot(notreat,aes(time,y))+geom_point() #plot it
data.list.notreat<-with(notreat,
list(Y=y,
t=time,
N=nrow(notreat)
))
rstan:::rstudio_stanc("stan/fakeseedmodel.stan")
###below are the same model coded in different ways. mod 1 ia good and returns proper parameners, mod 2 is baaad.
mod1= stan('stan/fakeseedmodel.stan', data = data.list.notreat,
iter = 3000, warmup=2000) ###good mdel
rstan:::rstudio_stanc("stan/fakeseedmodel.stan")
rstan:::rstudio_stanc("stan/fakeseedmodel.stan")
###below are the same model coded in different ways. mod 1 ia good and returns proper parameners, mod 2 is baaad.
mod1= stan('stan/fakeseedmodel.stan', data = data.list.notreat,
iter = 3000, warmup=2000) ###good mdel
df.adj<-df
df.adj$time<-ifelse(df.adj$time==0,0.0001,df.adj$time)
### PART 1: NO TREATMENTS ###########
notreat<-filter(df.adj,chilltreat==1) ## do this for models with out any predictors)
ggplot(notreat,aes(time,y))+geom_point() #plot it
data.list.notreat<-with(notreat,
list(Y=y,
t=time,
N=nrow(notreat)
))
###below are the same model coded in different ways. mod 1 ia good and returns proper parameners, mod 2 is baaad.
mod1= stan('stan/fakeseedmodel.stan', data = data.list.notreat,
iter = 3000, warmup=2000) ###good mdel
mod1.sum<-summary(mod1)$summary
mod1.sum[c("beta","t50","d","sigma"),]
### PART 1: NO TREATMENTS ###########
notreat<-filter(df.adj,chilltreat==1) ## do this for models with out any predictors)
data.list<-with(df.adj,
list(Y=y,
t=time,
chill=chilltreat,
N=nrow(df.adj)
)
)
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
###below are the same model coded in different ways.
mod3 = stan('stan/fakeseedgoodchill.stan', data = data.list,  ##4/3/19 229 divergent transitions
iter = 3000, warmup=2200)
mod3.sum<-summary(mod3)$summary
mod3.sum[c("a_t50","d","beta","b_t50","sigma"),] ###but very wrong parameter estimate for a_t50 and b_t50 and sigma.
mod3.drc<-drm(y~time,chilltreat,fct=LL.3(),data=df,type="continuous")
summary(mod3.drc)
