n<-length(y)
y=35,34,38,35,37
y=c(35,34,38,35,37)
n<-length(y)
estimate<-mean(y)
se<-sd(y)/sqrt(n)
se
int.50<-estimate+qt(c(.25,.75),n-1)*se
int.50
plot(y)
abline(y)
scatterplot(y)
library(car)
scatterplot(y)
abline(y)
int.95<-estimate+qnorm(.975)*se
in.95
int.95
estimate(700/300)
estimate<-(700/300)
se<-sqrt(estimate*(1-estiamte)/1000)
estimate<-(700/300)
estimate
se<-sqrt(estimate*(1-estiamte)/1000)
se<-sqrt(estimate*(1-estimate)/1000)
int.95<-estimate+qnorm(c(.025,.975))*se
y<-rep(c(0,1,2,3,4), c(600,300, 50,30,20))
mean(y)
n<-length(y)
n<-length(y)
estimate<-mean(y)
se<-sd(y)/sqrt(n)
int.95(estimate+qt(c(.025,.975))*se)
int.95<-(estimate+qt(c(.025,.975))*se)
int.95<-(estimate+qt(c(.025,.975),n-1)*se)
girl<-n(.4777, .4875, .4859, .4754, .4874, .4864, .4813, .4787, .4895, .4797, .4876, .4859, .4857, .4907, .5010, .4903, .4860, .4911, .4871, .4725, .4822, .4870, .4823, .4973)
girl<-c(.4777, .4875, .4859, .4754, .4874, .4864, .4813, .4787, .4895, .4797, .4876, .4859, .4857, .4907, .5010, .4903, .4860, .4911, .4871, .4725, .4822, .4870, .4823, .4973)
mean(c)
mean(girl)
sd(girl)
mean(theor)
theor<-c(.5,.5,.5)
mean(theor)
sd(theor)
sd(girl)
sd_exp<-sqrt((.486)(1-.486)/3903)
sqrt((.486)(1-.486)/3903)
sqrt((.486)(1-.486)/3903))
sqrt((.486)(1-.486)/3903)
mean(girl)
sd(girl)
sqrt((.485675)^2/(3903-1))
chisq.test(sd(girl),0.007775031)
meangirl<-mean(girl)
int.95 <- meangirl + qt(c(.025,.975),3903-1)
int.95
esde<-sqrt((.485675)^2/(3903-1))
esde
se<=esde(sqrt(3903))
sE<=esde(sqrt(3903))
esde/(sqrt(3903))
SE<-esde/(sqrt(3903))
int.95 <- meangirl + qt(c(.025,.975),3903-1)*SE
int.95
mean(girl)
meangirl<-mean(girl)
sd(girl)
sqrt((.486)(1-.486)/3903)
sqrt((.486)*(1-.486)/3903)
obs<-sd(girl) #observed sd
exp<-sqrt((.486)*(1-.486)/3903) ##should be expected sd based on observed mean if there was not variation butIsn't this the standard error formula not standard deviation?
chisq.test((obs)-(exp))^2/(exp))
se(obs)
se<-obs/sqrt(3903)
se
2*se
obs+(2*se)
obs-(2*se)
int.95 <- meangirl + qnorm(c(.025,.975))*exp
int.95
vector1<-c(0,50,mean=35, sd=10)
vector1
new<-rescale(vector1,mean=100, sd=15)
rescale(vector1,mean=100, sd=15)
help.search(rescaling)
help.search(rescale)
vector1<-c(0,50,mean=35, sd=10)
rescale(vector1,mean=100, sd=15)
runif(20,min=1, max=100)
h<-runif(20,min=1, max=100)
h
h
h
runif(20,min=1, max=100)
#(4)
runif(20,min=1, max=100)
sum(above)
sum(runif(20,min=1, max=100))
sum(runif(20,min=1, max=100))
for (sum(runif(20,min=1, max=100)))
for(i in 1-1000) {sum(runif(20,min=1, max=100))}
three<-for(i in 1-1000) {sum(runif(20,min=1, max=100))}
three#(4)
three<-for(i in 1-1000) {sum(runif(20,min=1, max=100))}
for(i in 1-1000) {sum(runif(20,min=1, max=100))}
h= sum(runif(20,min=1, max=100)
hfor(i in 1-1000) {sum(runif(20,min=1, max=100))}
h
h
#1) Atest is graded from 0to50,with an averagescore of 35and a standard deviation of 10.
s=c()
h= sum(runif(20,min=1, max=100)
for(i in 1-1000) {s[i]=h[i])}
for(i in 1-1000) {s[i]=h[i]}
s
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
library(plotrix)
library(gdata)
library(nlme)
library(scales)
library(arm)
library(dplyr)
library(tidyr)
library(ggplot2)
library(gridExtra)
library(knitr)
library(xtable)
require(vegan)
data(sipoo)
View(sipoo)
out <- oecosimu(sipoo, decorana, "swap", burnin=100, thin=10, statistic="evals")
out
decorana
plot(as.ts(out))
lag.plot(as.ts(out))
acf(as.ts(out))
## Density plot: needs lattice
require(lattice)
densityplot(out, as.table = TRUE)
## Use quantitative null models to compare
## mean Bray-Curtis dissimilarities
data(dune)
meandist <- function(x) mean(vegdist(x, "bray"))
mbc1 <- oecosimu(dune, meandist, "r2dtable")
mbc1
## Define a custom function that shuffles
## cells in each rows
f <- function(x) {
apply(x, 2, function(z) sample(z, length(z)))
}
mbc2 <- oecosimu(as.matrix(dune), meandist, f)
mbc2
mbc2 <- oecosimu(as.matrix(dune), meandist, f)
data(dune)
meandist <- function(x) mean(vegdist(x, "bray"))
mbc1 <- oecosimu(dune, meandist, "r2dtable")
mbc1
## Define a custom function that shuffles
## cells in each rows
f <- function(x) {
apply(x, 2, function(z) sample(z, length(z)))
}
mbc2 <- oecosimu(as.matrix(dune), meandist, f)
mbc2
mbc2 <- oecosimu(as.matrix(dune),NULL, meandist, f)
mbc2 <- oecosimu(as.matrix(dune),arg= meandist, f)
data(sipoo)
rm(list=ls())
options(stringsAsFactors = FALSE)
require(vegan)
data(sipoo)
View(sipoo)
data <- cbind(c("A","B","C","A"), c("John", "Kendra", "Martin", "Steve"), c("12","12","13","14"))
colnames(data) <- c("Group", "Name", "Score")
data <- as.data.frame(data)
p <- ggplot(data, aes(x = Name, y = Score, fill = Name)) +
geom_point(pch = 19, aes(col = Group)) +
scale_colour_manual(values = c("black", "red", "green")) +
guides(fill = FALSE); p
library(ggplot2)
p <- ggplot(data, aes(x = Name, y = Score, fill = Name)) +
geom_point(pch = 19, aes(col = Group)) +
scale_colour_manual(values = c("black", "red", "green")) +
data = cbind(c("A","B","C","A"), c("John", "Kendra", "Martin", "Steve"), c("12","12","13","14"))
colnames(data) = c("Group", "Name", "Score")
data = as.data.frame(data)
p = ggplot(data, aes(x=Name, y=Score, fill=Name)) + geom_point(pch = 19, aes(col=Group)) + scale_colour_manual(values=c("black", "red", "green"))
print(p)
ggplot(iris) + geom_point(aes(x=Sepal.Width, y=Sepal.Length, color=Species, size=Sepal.Length))
ggplot(iris) + geom_point(aes(x=Sepal.Width, y=Sepal.Length, color=Species, size=Sepal.Length))
ggplot(iris) + geom_point(aes(x=Sepal.Width, y=Sepal.Length, color=Species, size=Sepal.Length)+scale_color_discrete(breaks="setosa"))
ggplot(iris) + geom_point(aes(x=Sepal.Width, y=Sepal.Length, color=Species, size=Sepal.Length))+scale_color_discrete(breaks="setosa"))
ggplot(iris) + geom_point(aes(x=Sepal.Width, y=Sepal.Length, color=Species, size=Sepal.Length))
16+12+8+4+0+
8+6+4+2+0+
4+3+2+1+0
16+12+8+4+0+
8+6+4+2+0+
4+3+2+1+0
24+18+12+6+0+
16+12+8+4+0+
8+6+4+2+0+
4+3+2+1+0
130*3
16+12+8+4+0+
8+6+4+2+0+
4+3+2+1+0
390*3
10*4*2
den<-12+8+4+2
reps<-den*3
treatments<-reps*2
surface<-24+18+12+6+0+
16+12+8+4+0+
8+6+4+2+0+
4+3+2+1+0
treaties<-surface*3 #=390
backup<-3*surface
treaties<-backup*3 #=390
surface<-24+18+12+6+0+
16+12+8+4+0+
8+6+4+2+0+
4+3+2+1+0
##130 seeds of each species * 3 treatments
backup<-3*surface
treaties<-backup*3 #=390
surface<-24+18+12+6+0+
16+12+8+4+0+
8+6+4+2+0+
4+3+2+1+0
##130 seeds of each species * 3 treatments
backup<-3*surface
treaties<-backup*3 #=1170
#GERMINATION TRIALS
#10 seeds per petri dish, 32? dishes per chamber * 8 species
# 4 replicates of 10
dish<-10
reps<-dish*4
germtreat<-reps*2
#80 seeds/species
### for testing pairwise
den<-12+8+4+2
reps<-den*3
treatments<-reps*2
##156
treaties+treatments+germtreat
warnings()
\begin{tabular*}{10 cm}{|l|l|}
1000/10/2
50\3
50/3
16*3*2*10
library(rstan)
library(rstanarm)
data(spinach)
library(devtools)
install_github("daniel-gerhard/standrc")
install.packages("devtools")
library(devtools)
install_github("daniel-gerhard/standrc")
install.packages("drcSeedGerm")
install_github("OnofriAndreaPG/drcSeedGerm")
library(devtools)
install_github("OnofriAndreaPG/drcSeedGerm")
data("lotusOR")
install_github("OnofriAndreaPG/drcSeedGerm")
library(devtools)
install_github("OnofriAndreaPG/drcSeedGerm")
library(drcSeedGerm)
data("lotusOR")
data(lotusOR)
data(lotusOr)
counts <- lotusOr[,3:length(lotusOr[1,])]
treat <- data.frame(tratt=lotusOr[,1])
nViable <- rep(25,12)
moniTimes <- c(1:15)
counts
##Began by Dan and Lizzie late Feb 2019
###updated most recently by Dan on March 1 2019
##Purpose is to simulat germiantion data a kind to Dan's trial
rm(list=ls())
options(stringsAsFactors = FALSE)
graphics.off()
loadmodels <- FALSE
if(length(grep("Lizzie", getwd())>0)) {
setwd("~/Documents/git/projects/misc/dan/timetogerminate/germination_trials")
} else setwd("~/Documents/git/timetogerminate/germination_trials")
if(loadmodels){
load("fake_germ_models") # emw: What is this, do I need it? DB...no its only so I can load models but none currently work.
}
library(rstan)
library(tidyr)
library(drc)
library(dplyr)
library(shinystan)
library(extraDistr)
######Chilling only
time<-seq(0,24,by=1) #time of each trial
treat<-c(0,1) # level of chilling, continuous data
sigma_y <- 0.01 ## small signmal
t50.a<-15 #intercept of t50
t50.b<--5 # slope of t50 with chilling
beta.a<-6 #intercept of beta (shape paramenter)
beta.b<-2 # slope of beta with chilling
d.a<-5 # intercept of d (maximum germination)
d.b<-10 #slope of d with chilling
repz<-seq(1,50,by=1) ## number of replicates
###for starters assme a 100% germination scenario, no (D parameter)
df<-data.frame(time=numeric(), y=numeric(),chilltreat=numeric(),ID=numeric())  ##generate fake data
for (i in c(1:length(treat))){
y <- c()
for(k in c(1:length(repz))){
#y<-(d.b*treat[i]+d.a)/(1+((time/(t50.b*treat[i]+t50.a))^-(beta.b*treat[i]+beta.a)))
y<-1/(1+((time/(t50.b*treat[i]+t50.a))^-(beta.b*treat[i]+beta.a)))
dfhere <- data.frame(time=time, y=rtnorm(length(y),y,sigma_y,a=0,b=1),chilltreat=rep(treat[i], length(y)),ID=rep(repz[k],length(y))) ## make a data frame for each level, this over rights so
df <- rbind(df, dfhere) ## rbind it here for safty
}
}
df$uniqueID<-paste(df$chilltreat,df$ID,sep="-")
ploty<-ggplot(df,aes(time,y))+geom_point(aes(color=as.factor(chilltreat)))
ploty
ploty+geom_line(stat = "summary", fun.y = mean, aes(color=as.factor(chilltreat))) ### plot point with mean lines these datas look good
df.adj<-df
df.adj$time<-ifelse(df.adj$time==0,0.0001,df.adj$time) ### I think the log logistic distrubtion can't handle when time=0 because it creata log of (0) situation
###this alwows germ mo
data.list<-with(df.adj,
list(Y=y,
t=time,
chill=chilltreat,
N=nrow(df.adj)
)
)
mod4 = stan('stan/fakeseed_chillonly.stan', data = data.list,
iter = 3000, warmup=2000) ### 14020 divergent transitions
rstan:::rstudio_stanc("stan/fakeseed_chillonly.stan")
mod4 = stan('stan/fakeseed_chillonly.stan', data = data.list,
iter = 3000, warmup=2000) ### 14020 divergent transitions
mod4.sum<-summary(mod4)$summary
mod4.sum[c("a_beta","a_t50","b_chill_beta","b_chill_t50","sigma"),]                                                          #
launch_shinystan(mod4)
rstan:::rstudio_stanc("stan/fakeseed_chillonly.stan")
rstan:::rstudio_stanc("stan/fakeseed_chillonly.stan")
rstan:::rstudio_stanc("stan/fakeseed_chillonly.stan")
rstan:::rstudio_stanc("stan/fakeseed_chillonly.stan")
rstan:::rstudio_stanc("stan/fakeseed_chillonly.stan")
rstan:::rstudio_stanc("stan/fakeseed_chillonly.stan")
rstan:::rstudio_stanc("stan/fakeseed_chillonly.stan")
rstan:::rstudio_stanc("stan/fakeseed_chillonly.stan")
rstan:::rstudio_stanc("stan/fakeseed_chillonly.stan")
rstan:::rstudio_stanc("stan/fakeseed_chillonly.stan")
mod4 = stan('stan/fakeseed_chillonly.stan', data = data.list,
iter = 3000, warmup=2000) ### 14020 divergent transitions
mod4.sum<-summary(mod4)$summary
mod4.sum[c("a_beta","a_t50","b_chill_beta","b_chill_t50","sigma"),]                                                          #
rstan:::rstudio_stanc("stan/fakeseed_chillonly.stan")
rstan:::rstudio_stanc("stan/fakeseed_chillonly.stan")
rstan:::rstudio_stanc("stan/fakeseed_chillonly.stan")
rstan:::rstudio_stanc("stan/fakeseed_chillonly.stan")
rstan:::rstudio_stanc("stan/fakeseed_chillonly.stan")
rstan:::rstudio_stanc("stan/fakeseed_chillonly.stan")
rstan:::rstudio_stanc("stan/fakeseed_chillonly.stan")
mod4 = stan('stan/fakeseed_chillonly.stan', data = data.list,
iter = 3000, warmup=2000) ### 14020 divergent transitions
rstan:::rstudio_stanc("stan/fakeseed_chillonly.stan")
data.list<-with(df.adj,
list(Y=y,
t=time,
chill=chilltreat,
N=nrow(df.adj)
)
)
mod4 = stan('stan/fakeseed_chillonly.stan', data = data.list,
iter = 3000, warmup=2000) ###  divergent transitions
mod4.sum<-summary(mod4)$summary
mod4.sum[c("a_beta","a_t50","b_chill_beta","b_chill_t50","sigma"),]                                                          #
rstan:::rstudio_stanc("stan/fakeseed_chillonly.stan")
mod4 = stan('stan/fakeseed_chillonly.stan', data = data.list,
iter = 3000, warmup=2000,control = list(max_treedepth = 15)) ###  divergent transitions
mod4.sum<-summary(mod4)$summary
mod4.sum[c("a_beta","a_t50","b_chill_beta","b_chill_t50","sigma"),]                                                          #
rstan:::rstudio_stanc("stan/fakeseed_chillonly.stan")
mod4 = stan('stan/fakeseed_chillonly.stan', data = data.list,
iter = 3000, warmup=2000,control = list(max_treedepth = 15)) ###  250 divergent transitions
mod4.sum<-summary(mod4)$summary
mod4.sum[c("a_beta","a_t50","b_chill_beta","b_chill_t50","sigma"),]                                                          #
launch_shinystan(mod4)
rstan:::rstudio_stanc("stan/fakeseed_chillonly.stan")
