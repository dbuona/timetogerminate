bbb<-ggplot(dat.simple,aes(xx,bb))+geom_rect(dat.simple,mapping=aes(xmin=16,xmax=24,ymin=0,ymax=30),fill="gray")+theme_base()+geom_line(aes(xx,bb),color="red")+scale_x_continuous(breaks=c(4,8,12,16,20,24))+scale_y_continuous(breaks=c(0,5,10,15,20,25,30))+ labs(y = "temperature",x = "hours")+ggtitle("warm/long")+theme(plot.title=element_text( hjust=0.5, vjust=0.5))
ccc<-ggplot(dat.simple,aes(xx,cc))+geom_rect(dat.simple,mapping=aes(xmin=10,xmax=24,ymin=0,ymax=30),fill="gray")+theme_base()+geom_line(aes(xx,cc),color="blue")+scale_x_continuous(breaks=c(4,8,12,16,20,24))+scale_y_continuous(breaks=c(0,5,10,15,20,25,30))+ labs(y = "temperature",x = "hours")+ggtitle("cool/short")+theme(plot.title=element_text( hjust=0.5, vjust=0.5))
ddd<-ggplot(dat.simple,aes(xx,dd))+geom_rect(dat.simple,mapping=aes(xmin=16,xmax=24,ymin=0,ymax=30),fill="gray")+theme_base()+geom_line(aes(xx,dd),color="blue")+scale_x_continuous(breaks=c(4,8,12,16,20,24))+scale_y_continuous(breaks=c(0,5,10,15,20,25,30))+ labs(y = "temperature",x = "hours")+ggtitle("cool/long")+theme(plot.title=element_text( hjust=0.5, vjust=0.5))
covarying<-ggarrange(aaa, bbb,ccc, ddd, ncol=2, nrow=2, common.legend = TRUE, legend="bottom")
aaaa<-ggplot(dat.simple,aes(xx,ee))+geom_rect(dat.simple,mapping=aes(xmin=10,xmax=24,ymin=0,ymax=30),fill="gray")+theme_base()+geom_line(aes(xx,ee),color="red")+scale_x_continuous(breaks=c(4,8,12,16,20,24))+scale_y_continuous(breaks=c(0,5,10,15,20,25,30))+ labs(y = "temperature",x = "hours")+ggtitle("warm/short")+theme(plot.title=element_text( hjust=0.5, vjust=0.5))
bbbb<-ggplot(dat.simple,aes(xx,ee))+geom_rect(dat.simple,mapping=aes(xmin=16,xmax=24,ymin=0,ymax=30),fill="gray")+theme_base()+geom_line(aes(xx,ee),color="red")+scale_x_continuous(breaks=c(4,8,12,16,20,24))+scale_y_continuous(breaks=c(0,5,10,15,20,25,30))+ labs(y = "temperature",x = "hours")+ggtitle("warm/long")+theme(plot.title=element_text( hjust=0.5, vjust=0.5))
cccc<-ggplot(dat.simple,aes(xx,ff))+geom_rect(dat.simple,mapping=aes(xmin=10,xmax=24,ymin=0,ymax=30),fill="gray")+theme_base()+geom_line(aes(xx,ff),color="blue")+scale_x_continuous(breaks=c(4,8,12,16,20,24))+scale_y_continuous(breaks=c(0,5,10,15,20,25,30))+ labs(y = "temperature",x = "hours")+ggtitle("cool/short")+theme(plot.title=element_text( hjust=0.5, vjust=0.5))
dddd<-ggplot(dat.simple,aes(xx,ff))+geom_rect(dat.simple,mapping=aes(xmin=16,xmax=24,ymin=0,ymax=30),fill="gray")+theme_base()+geom_line(aes(xx,ff),color="blue")+scale_x_continuous(breaks=c(4,8,12,16,20,24))+scale_y_continuous(breaks=c(0,5,10,15,20,25,30))+ labs(y = "temperature",x = "hours")+ggtitle("cool/long")+theme(plot.title=element_text( hjust=0.5, vjust=0.5))
noncovarying<-ggarrange(aaaa, bbbb,cccc, dddd, ncol=2, nrow=2, common.legend = TRUE, legend="bottom")
grid.arrange(flat,covarying,noncovarying,ncol=3)
grid.rect(width = .5, height = .5, gp = gpar(lwd = 2, col = "black", fill = NA,hjust="left",vjust="top"))
grid.arrange(flat,covarying,noncovarying,ncol=3)
View(dat.simple)
View(dat.simple)
xy
dat
########
temp<-c(12,12,12,12)
light<-c(11,11,15,15)
########
temp<-c(12,12,12,12)
light<-c(11,11,15,15)
treat<-c("warm/short","cool/short","warm/long","warm/long")
dawn<-data.frame(temp,light,treat)
dawn$dawn.offset$(dan$temp-dawn$light)
dawn$dawn.offset$dan$temp-dawn$light
dawn$dawn.offset<-dan$temp-dawn$light
dawn$dawn.offset<-dawn$temp-dawn$light
View(dawn)
require(rstan)
require(geiger)
require(MCMCglmm)
# load data
data(geospiza)
dat <- geospiza$geospiza.data
View(dat)
# create fake sample of trees
tr <- drop.tip(geospiza$geospiza.tree, 'olivacea')
trees <- vector('list', 15)
for(i in 1:15) trees[[i]] <- tr
# get the inverse of the phylovcv, order all to match data
invA <- lapply(trees, function(x) solve(vcv.phylo(x))[row.names(dat), row.names(dat)])
stdat <- list(
N=dim(dat)[1],
y=dat$wingL,
x=dat$tarsusL,
invA=invA,
Ntree=length(invA), #number of trees
p=rep(1/length(invA), length(invA)) #probability of sampling each tree
)
phymodel <- "
data {
int<lower=0> N; //species
int<lower=0> Ntree; //number of trees
vector[N] y;
real x[N];
matrix[N,N] invA[Ntree]; //array of inverse of phylovcv?
}
parameters {
real alpha; //intercept
real beta; //slope
real<lower=0> tau; // scaling factor
simplex[Ntree] theta; //mixture sampling?
}
transformed parameters{
real sigma; //regression error
sigma <- 1/sqrt(tau);
}
model {
vector[N] mu; //multivariate normal mean
//priors
alpha ~ normal(0, 10);
beta ~ normal(0, 10);
sigma ~ uniform(0,1000);
tau ~ gamma(1,1);
theta ~ uniform(0,1);
for(n in 1:N){
mu[n] <- alpha+beta*x[n];
}
y ~ multi_normal_prec(mu, tau*invA[Ntree]);
}
"
phystan = stan(model_name="phylogenetic regression", model_code = phymodel, data=stdat , iter = 1000, chains = 2)
stdat <- list(
N=dim(dat)[1],
y=dat$wingL,
x=dat$tarsusL,
invA=invA,
Ntree=length(invA), #number of trees
p=rep(1/length(invA), length(invA)) #probability of sampling each tree
)
stdat <- list(
N=dim(dat)[1],
y=dat$wingL,
x=dat$tarsusL,
invA=invA,
Ntree=length(invA), #number of trees
p=rep(1/length(invA), length(invA)) #probability of sampling each tree
)
stdat <- list(
N=dim(dat)[1],
y=dat$wingL,
x=dat$tarsusL,
invA=invA,
Ntree=length(invA), #number of trees
p=rep(1/length(invA), length(invA)) #probability of sampling each tree
)
rm(list=ls())
options(stringsAsFactors = FALSE)
graphics.off()
library(phylolm)
library(extraDistr)
library("ape")
library("phytools")
library("geiger")
library("gbm")
library("pez")
library(caper)
library(picante)
library("tidyverse")
library(boot)
library("phylolm")
library("ggplot2")
library(arm)
library("randomForest")
library(car)
library(ggstance)
library(broom)
library(brms)
library(rstan)
#library(devtools)
#install_github("rmcelreath/rethinking")
library(rstan)
setwd("~/Documents/git/proterant/Input/datasheets_derived/MTSV_USFS/")
set.seed(613)
tre <-read.tree("pruned_for_mich.tre")
tre$node.label<-NULL
lab<-tre$tip.label
### simulates 2 continues variables with differnt phylogenetic clustering themselves
x = rTrait(n=2,phy=tre)
y = rbinTrait(n=1, phy=tre, beta=c(-.5,1.8), alpha=0.7, X=x)
dat<-as.data.frame(cbind(x,y))
mod1<-phyloglm(y~V1+V2,dat,tre, method = "logistic_MPLE", btol = 10, log.alpha.bound = 6,
start.beta=NULL, start.alpha=NULL,
boot=10,full.matrix = TRUE)
y = rbinTrait(n=2, phy=tre, beta=c(-.5,1.8), alpha=0.7, X=x)
y
x = rTrait(n=2,phy=tre)
x
y = rbinTrait(n=1, phy=tre, beta=c(-.5,1.8), alpha=0.7, X=x)
dat<-as.data.frame(cbind(x,y))
dat
y = rbinTrait(n=1, phy=tre, beta=c(-.5,1.8), alpha=1, X=x)
dat<-as.data.frame(cbind(x,y))
mod1<-phyloglm(y~V1+V2,dat,tre, method = "logistic_MPLE", btol = 10, log.alpha.bound = 6,
start.beta=NULL, start.alpha=NULL,
boot=10,full.matrix = TRUE)
mod1<-phyloglm(y~V1+V2,dat,tre, method = "logistic_MPLE", btol = 10, log.alpha.bound = 6,
start.beta=NULL, start.alpha=NULL,
boot=10)
mod1<-phyloglm(y~V1+V2,dat,tre, method = "logistic_MPLE", btol = 50, log.alpha.bound = 6,
start.beta=NULL, start.alpha=NULL,
boot=10)
?rTrait()
x = rTrait(n=2,phy=tre.model="lambda",paremeters=c(0.1,0.1))
x = rTrait(n=2,phy=tre.model="lambda",paremeters=list(0.1,0.1))
x = rTrait(n=2,phy=tre,model="lambda",paremeters=list(0.1,0.1))
x = rTrait(n=2,phy=tre,model="lambda",paremeters=list(0.1))
x = rTrait(n=2,phy=tre,model="lambda",paremeters=list(c(0.1,0.2))
x = rTrait(n=2,phy=tre,model="lambda",paremeters=list(c(0.1,0.2)))
x = rTrait(n=2,phy=tre,model="lambda",paremeters=list(c(0.1,0.2)))
x = rTrait(n=2,phy=tre,model="lambda")
y = rbinTrait(n=1, phy=tre, beta=c(-.5,1.8), alpha=1, X=x)
dat<-as.data.frame(cbind(x,y))
dat
rm(list=ls())
options(stringsAsFactors = FALSE)
graphics.off()
loadmodels <- FALSE
if(length(grep("Lizzie", getwd())>0)) {
setwd("~/Documents/git/projects/misc/dan/timetogerminate/germination_trials")
} else setwd("~/Documents/git/timetogerminate/germination_trials")
if(loadmodels){
load("fake_germ_models") # emw: What is this, do I need it? DB...no its only so I can load models but none currently work.
}
library(rstan)
library(tidyr)
library(drc)
library(dplyr)
library(shinystan)
library(extraDistr)
######Chilling only
time<-seq(0,24,by=1) #time of each trial
treat<-c(0,1) # level of chilling, continuous data
sigma_y <- 0.01 ## small signma
#Start with data where only t50 changes
t50.a<-15 #intercept of t50
t50.b<--5 # slope of t50 with chilling
beta.a<-6 #intercept of beta (shape paramenter)
d.a<-0.9 # intercept of d (maximum germination %)
repz<-seq(1,50,by=1) ## number of replicates
### generate fake data
df<-data.frame(time=numeric(), y=numeric(),chilltreat=numeric(),ID=numeric())  ##generate fake data
for (i in c(1:length(treat))){
y <- c()
for(k in c(1:length(repz))){
#y<-(d.b*treat[i]+d.a)/(1+((time/(t50.b*treat[i]+t50.a))^-(beta.b*treat[i]+beta.a)))
y<-d.a/(1+((time/(t50.b*treat[i]+t50.a))^-(beta.a)))
dfhere <- data.frame(time=time, y=rtnorm(length(y),y,sigma_y,a=0,b=Inf),chilltreat=rep(treat[i], length(y)),ID=rep(repz[k],length(y)))
df <- rbind(df, dfhere) ## rbind it here for safty
}
}
###plot the trials
ploty<-ggplot(df,aes(time,y))+geom_point(aes(color=as.factor(chilltreat)))
ploty
ploty+geom_line(stat = "summary", fun.y = mean, aes(color=as.factor(chilltreat))) ### plot with mean lines
rm(list=ls())
options(stringsAsFactors = FALSE)
graphics.off()
library(phylolm)
library(extraDistr)
library("ape")
library("phytools")
library("geiger")
library("gbm")
library("pez")
library(caper)
library(picante)
library("tidyverse")
library(boot)
library("phylolm")
library("ggplot2")
library(arm)
library("randomForest")
library(car)
library(ggstance)
library(broom)
library(brms)
library(rstan)
#library(devtools)
#install_github("rmcelreath/rethinking")
library(rstan)
setwd("~/Documents/git/proterant/Input/datasheets_derived/MTSV_USFS/")
set.seed(613)
tre <-read.tree("pruned_for_mich.tre")
tre$node.label<-NULL
lab<-tre$tip.label
?rTrait()
x = rTrait(n=2,phy=tre,model="lambda")
y = rbinTrait(n=1, phy=tre, beta=c(-.5,1.8), alpha=1, X=x)
dat<-as.data.frame(cbind(x,y))
mod1<-phyloglm(y~V1+V2,dat,tre, method = "logistic_MPLE", btol = 50, log.alpha.bound = 6,
start.beta=NULL, start.alpha=NULL,
boot=10)
y = rbinTrait(n=1, phy=tre, beta=c(-.5,1.8), alpha=0, X=x)
y
dat<-as.data.frame(cbind(x,y))
mod1<-phyloglm(y~V1+V2,dat,tre, method = "logistic_MPLE", btol = 50, log.alpha.bound = 6,
start.beta=NULL, start.alpha=NULL,
boot=10)
?rbinTrait()
tre = rtree(50)
x = rTrait(n=1,phy=tre)
X = cbind(rep(1,50),x)
y = rbinTrait(n=1, phy=tre, beta=c(-1,0.5), alpha=1, X=X)
dat<-as.data.frame(cbind(X,y))
mod1<-phyloglm(y~V1+V2,dat,tre, method = "logistic_MPLE", btol = 50, log.alpha.bound = 6,
start.beta=NULL, start.alpha=NULL,
boot=10)
dat
mod1<-phyloglm(y~V1+x,dat,tre, method = "logistic_MPLE", btol = 50, log.alpha.bound = 6,
start.beta=NULL, start.alpha=NULL,
boot=10)
dat
mod1<-phyloglm(y~V1+x,dat,tre, method = "logistic_MPLE", btol = 50, log.alpha.bound = 6,
start.beta=NULL, start.alpha=NULL,
boot=10)
mod1<-phyloglm(y~V1+x,dat,tre, method = "logistic_MPLE", btol = 100, log.alpha.bound = 6,
start.beta=NULL, start.alpha=NULL,
boot=10)
tre = rtree(50)
x = rTrait(n=1,phy=tre)
X = cbind(rep(1,50),x)
X
y = rbinTrait(n=1, phy=tre, beta=c(-1,0.5), alpha=1, X=X)
dat<-as.data.frame(cbind(X,y))
mod1<-phyloglm(y~V1+x,dat,tre, method = "logistic_MPLE", btol = 100, log.alpha.bound = 6,
start.beta=NULL, start.alpha=NULL,
boot=10)
?phyoglm()
?phyloglm()
set.seed(123456)
tre = rtree(50)
x = rTrait(n=1,phy=tre)
X = cbind(rep(1,50),x)
y = rbinTrait(n=1,phy=tre, beta=c(-1,0.5), alpha=1 ,X=X)
dat = data.frame(trait01 = y, predictor = x)
fit = phyloglm(trait01~predictor,phy=tre,data=dat,boot=100)
summary(fit)
y = rbinTrait(n=1,phy=tre, beta=c(-1,0.5), alpha=0 ,X=X)
dat = data.frame(trait01 = y, predictor = x)
fit = phyloglm(trait01~predictor,phy=tre,data=dat,boot=100)
##Began by Dan and Lizzie late Feb 2019
###updated most recently by Dan on April 4 2019
##Purpose is to simulat germiantion data a kind to Dan's trial
rm(list=ls())
options(stringsAsFactors = FALSE)
graphics.off()
loadmodels <- FALSE
if(length(grep("Lizzie", getwd())>0)) {
setwd("~/Documents/git/projects/misc/dan/timetogerminate/germination_trials")
} else setwd("~/Documents/git/timetogerminate/germination_trials")
if(loadmodels){
load("fake_germ_models") # emw: What is this, do I need it? DB...no its only so I can load models but none currently work.
}
library(rstan)
library(tidyr)
library(drc)
library(dplyr)
library(shinystan)
library(extraDistr)
######Chilling only
time<-seq(0,24,by=1) #time of each trial
treat<-c(0,1) # level of chilling, continuous data
sigma_y <- 0.01 ## small signma
#Start with data where only t50 changes
t50.a<-15 #intercept of t50
t50.b<--5 # slope of t50 with chilling
beta.a<-6 #intercept of beta (shape paramenter)
d.a<-0.9 # intercept of d (maximum germination %)
repz<-seq(1,50,by=1) ## number of replicates
### generate fake data
df<-data.frame(time=numeric(), y=numeric(),chilltreat=numeric(),ID=numeric())  ##generate fake data
for (i in c(1:length(treat))){
y <- c()
for(k in c(1:length(repz))){
#y<-(d.b*treat[i]+d.a)/(1+((time/(t50.b*treat[i]+t50.a))^-(beta.b*treat[i]+beta.a)))
y<-d.a/(1+((time/(t50.b*treat[i]+t50.a))^-(beta.a)))
dfhere <- data.frame(time=time, y=rtnorm(length(y),y,sigma_y,a=0,b=Inf),chilltreat=rep(treat[i], length(y)),ID=rep(repz[k],length(y)))
df <- rbind(df, dfhere) ## rbind it here for safty
}
}
###plot the trials
ploty<-ggplot(df,aes(time,y))+geom_point(aes(color=as.factor(chilltreat)))
ploty
ploty+geom_line(stat = "summary", fun.y = mean, aes(color=as.factor(chilltreat))) ### plot with mean lines
df.adj<-df
df.adj$time<-ifelse(df.adj$time==0,0.0001,df.adj$time) ###the log logistic can't handle time values of zero. I am not sure if this is the right way to handle this
# mattches
######################M#########
hist(rnorm(1000,0,10))
# mattches
######################M#########
hist(rnorm(1000,0,15))
# mattches
######################M#########
hist(rnorm(1000,0,5))
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
data.list<-with(df.adj,
list(Y=y,
t=time,
chill=chilltreat,
N=nrow(df.adj)
)
)
mod3 = stan('stan/fakeseedgoodchill.stan', data = data.list,  ###13 divergent transitions
iter = 3000, warmup=2200)
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
# mattches
######################M#########
hist(rnorm(1000,0,2))
# mattches
######################M#########
hist(rnorm(1000,0,3))
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
data.list<-with(df.adj,
list(Y=y,
t=time,
chill=chilltreat,
N=nrow(df.adj)
)
)
mod3 = stan('stan/fakeseedgoodchill.stan', data = data.list,  ###13 divergent transitions
iter = 2000, warmup=1500)
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
for (i in c(1:length(treat))){
y <- c()
for(k in c(1:length(repz))){
#y<-(d.b*treat[i]+d.a)/(1+((time/(t50.b*treat[i]+t50.a))^-(beta.b*treat[i]+beta.a)))
y<- d.A /(1+exp(-beta.a * (log(t[i]) - log(t50.a sum(t50.b*treat)))))
dfhere <- data.frame(time=time, y=rtnorm(length(y),y,sigma_y,a=0,b=Inf),chilltreat=rep(treat[i], length(y)),ID=rep(repz[k],length(y)))
df <- rbind(df, dfhere) ## rbind it here for safty
}
}
for (i in c(1:length(treat))){
y <- c()
for(k in c(1:length(repz))){
#y<-(d.b*treat[i]+d.a)/(1+((time/(t50.b*treat[i]+t50.a))^-(beta.b*treat[i]+beta.a)))
y<- d.a /(1+exp(-beta.a * (log(t[i]) - log(t50.a sum(t50.b*treat)))))
dfhere <- data.frame(time=time, y=rtnorm(length(y),y,sigma_y,a=0,b=Inf),chilltreat=rep(treat[i], length(y)),ID=rep(repz[k],length(y)))
df <- rbind(df, dfhere) ## rbind it here for safty
}
}
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
##Began by Dan and Lizzie late Feb 2019
###updated most recently by Dan on April 4 2019
##Purpose is to simulat germiantion data a kind to Dan's trial
rm(list=ls())
options(stringsAsFactors = FALSE)
graphics.off()
loadmodels <- FALSE
if(length(grep("Lizzie", getwd())>0)) {
setwd("~/Documents/git/projects/misc/dan/timetogerminate/germination_trials")
} else setwd("~/Documents/git/timetogerminate/germination_trials")
if(loadmodels){
load("fake_germ_models") # emw: What is this, do I need it? DB...no its only so I can load models but none currently work.
}
library(rstan)
library(tidyr)
library(drc)
library(dplyr)
library(shinystan)
library(extraDistr)
######Chilling only
time<-seq(0,24,by=1) #time of each trial
treat<-c(0,1) # level of chilling, continuous data
sigma_y <- 0.01 ## small signma
#Start with data where only t50 changes
t50.a<-15 #intercept of t50
t50.b<--5 # slope of t50 with chilling
beta.a<-6 #intercept of beta (shape paramenter)
d.a<-0.9 # intercept of d (maximum germination %)
repz<-seq(1,50,by=1) ## number of replicates
### generate fake data
df<-data.frame(time=numeric(), y=numeric(),chilltreat=numeric(),ID=numeric())  ##generate fake data
for (i in c(1:length(treat))){
y <- c()
for(k in c(1:length(repz))){
#y<-(d.b*treat[i]+d.a)/(1+((time/(t50.b*treat[i]+t50.a))^-(beta.b*treat[i]+beta.a)))
y<-d.a/(1+((time/(t50.b*treat[i]+t50.a))^-(beta.a)))
dfhere <- data.frame(time=time, y=rtnorm(length(y),y,sigma_y,a=0,b=Inf),chilltreat=rep(treat[i], length(y)),ID=rep(repz[k],length(y)))
df <- rbind(df, dfhere) ## rbind it here for safty
}
}
###plot the trials
ploty<-ggplot(df,aes(time,y))+geom_point(aes(color=as.factor(chilltreat)))
ploty
ploty+geom_line(stat = "summary", fun.y = mean, aes(color=as.factor(chilltreat))) ### plot with mean lines
df.adj<-df
df.adj$time<-ifelse(df.adj$time==0,0.0001,df.adj$time) ###the log logistic can't handle time values of zero. I am not sure if this is the right way to handle this
data.list<-with(df.adj,
list(Y=y,
t=time,
chill=chilltreat,
N=nrow(df.adj)
)
)
mod3 = stan('stan/fakeseedgoodchill.stan', data = data.list,  ###13 divergent transitions
iter = 2000, warmup=1000)
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
data.list<-with(df.adj,
list(Y=y,
t=time,
chill=chilltreat,
N=nrow(df.adj)
)
)
mod3 = stan('stan/fakeseedgoodchill.stan', data = data.list,  ###13 divergent transitions
iter = 2000, warmup=1000)
mod3.sum<-summary(mod3)$summary
mod3.sum[c("a_t50","d","beta","b_t50","sigma"),] ###but very wrong parameter estimate for a_t50 and b_t50 and sigma.
mod3 = stan('stan/fakeseedgoodchill.stan', data = data.list,  ###13 divergent transitions
iter = 3000, warmup=2000,control(list(stepsize= 0.5)))
mod3 = stan('stan/fakeseedgoodchill.stan', data = data.list,  ###13 divergent transitions
iter = 3000, warmup=2000,control(list(stepsize= 0.5)))
# mattches
######################M#########
hist(rnorm(1000,0,3))
# mattches
######################M#########
hist(rnorm(1000,0,3))
rbeta(1,2,2)
hist(rbeta(1000,2,2))
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
data.list<-with(df.adj,
list(Y=y,
t=time,
chill=chilltreat,
N=nrow(df.adj)
)
)
mod3 = stan('stan/fakeseedgoodchill.stan', data = data.list,  ###13 divergent transitions
iter = 3000, warmup=2000)
mod3.sum<-summary(mod3)$summary
mod3.sum[c("a_t50","d","beta","b_t50","sigma"),] ###but very wrong parameter estimate for a_t50 and b_t50 and sigma.
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
rstan:::rstudio_stanc("stan/fakeseedgoodchill.stan")
data.list<-with(df.adj,
list(Y=y,
t=time,
chill=chilltreat,
N=nrow(df.adj)
)
)
mod3 = stan('stan/fakeseedgoodchill.stan', data = data.list,  ###13 divergent transitions
iter = 3000, warmup=2000)
